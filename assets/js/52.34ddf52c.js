(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{406:function(s,n,e){"use strict";e.r(n);var r=e(42),a=Object(r.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"ingress对外暴露应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ingress对外暴露应用"}},[s._v("#")]),s._v(" Ingress对外暴露应用")]),s._v(" "),e("hr"),s._v(" "),e("h2",{attrs:{id:"pod与ingress的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pod与ingress的关系"}},[s._v("#")]),s._v(" Pod与Ingress的关系")]),s._v(" "),e("p",[s._v("• 通过Service关联Pod"),e("br"),s._v("\n• 基于域名访问"),e("br"),s._v("\n• 通过Ingress Controller实现Pod的负载均衡 - 支持TCP/UDP 4层和HTTP 7层\n"),e("img",{attrs:{src:"/images/k8s/k8s15.png",alt:""}}),e("br")]),s._v(" "),e("h2",{attrs:{id:"ingress工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ingress工作原理"}},[s._v("#")]),s._v(" Ingress工作原理")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/k8s/k8s16.png",alt:""}}),e("br"),s._v("\n1.ingress会监听master的变化，当有的service创建/删除/更新，\ningress会拉取最新内容，更新自己的域名与service的配置数据。"),e("br"),s._v("\n2.ingress接收请求，解析域名(可能还有路由规则)映射的service,\n将请求转发到service上，再由service自己默认的iptable(或lvs)\n转发到具体的pod上\n3.ingress具有nginx完整的功能，其实就是用nginx去实现的")]),s._v(" "),e("h2",{attrs:{id:"ingress实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ingress实践"}},[s._v("#")]),s._v(" Ingress实践")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 在前面的基础上，只保留web的deployment和service\n[root@k8s-master ~]# kubectl get deployment,svc\nNAME                        READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.extensions/web   2/2     2            2           21h\n\nNAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\nservice/kubernetes   ClusterIP   10.1.0.1       <none>        443/TCP        3d19h\nservice/web          NodePort    10.1.150.171   <none>        80:32507/TCP   3h45m\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"部署ingresscontroller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署ingresscontroller"}},[s._v("#")]),s._v(" 部署IngressController")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://pan.baidu.com/s/1RgL8h0xiLBKKMR_njXfyEg",target:"_blank",rel:"noopener noreferrer"}},[s._v("ingress控制器部署yaml"),e("OutboundLink")],1)]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 上传yaml\n# 直接apply yaml文件运行起来\n[root@k8s-master ~]# kubectl apply -f ingress-controller.yaml \nnamespace/ingress-nginx created\nconfigmap/nginx-configuration created\nconfigmap/tcp-services created\nconfigmap/udp-services created\nserviceaccount/nginx-ingress-serviceaccount created\nclusterrole.rbac.authorization.k8s.io/nginx-ingress-clusterrole created\nrole.rbac.authorization.k8s.io/nginx-ingress-role created\nrolebinding.rbac.authorization.k8s.io/nginx-ingress-role-nisa-binding created\nclusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-clusterrole-nisa-binding created\ndaemonset.apps/nginx-ingress-controller created\nservice/ingress-nginx created\n\n# 部署完毕\n[root@k8s-master ~]# kubectl get pods -n ingress-nginx -o wide\nNAME                             READY   STATUS    RESTARTS   AGE   IP                NODE        NOMINATED NODE   READINESS GATES\nnginx-ingress-controller-ctrc8   1/1     Running   0          26m   192.168.163.110   k8s-node2   <none>           <none>\nnginx-ingress-controller-rgxsm   1/1     Running   0          26m   192.168.163.109   k8s-node1   <none>           <none>\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("h3",{attrs:{id:"创建ingress规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建ingress规则"}},[s._v("#")]),s._v(" 创建Ingress规则")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 创建一个ingress.yaml文件，复制进去以下内容\n###########################################################\n# 资源的版本\napiVersion: extensions/v1beta1\n# 资源的类型\nkind: Ingress\n# ingress的属性\nmetadata:\n  name: web\nspec:\n  # 负载均衡的策略\n  rules:\n  # 配置域名 test.web.com\n  - host: test.web.com\n    http:\n      # 路由配置类似/abc，也可以省略\n      paths:\n      # 域名+路由映射到 名为web端口为80的service上\n      - backend:\n          serviceName: web\n          servicePort: 80\n~                            \n###########################################################\n\n# 执行ingress规则配置文件\n[root@k8s-master ~]# kubectl apply -f ingress.yaml \ningress.extensions/web created\n\n# 查看ingress资源配置\n[root@k8s-master ~]# kubectl get ingress\nNAME   HOSTS          ADDRESS   PORTS   AGE\nweb    test.web.com             80      49s\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("h3",{attrs:{id:"本地浏览器测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地浏览器测试"}},[s._v("#")]),s._v(" 本地浏览器测试")]),s._v(" "),e("p",[s._v("访问前，我们需要在访问主机上配域名解析。"),e("br"),s._v("\n首先，上面运行ingress控制器，我们已经知道。ingress在两台子节点上都有pod\n运行。用户首先是访问到ingress的pod,然后再由ingress做域名解析出service，\n然后从service映射的多个pod中挑出一个转发过去。"),e("br"),s._v("\nIngress控制器，默认是在每台node上起一个pod,当然你可以指定一批node\n单独跑ingress,做负载均衡用。你只需要从这些pod中挑出一个，绑定域名映射即可。\n用户的请求到了这个node上ingress,剩下的事就由ingress自己处理了。"),e("br"),s._v("\n我们这里就在本地hosts里面配置：192.168.163.109 test.web.com"),e("br"),s._v(" "),e("img",{attrs:{src:"/images/k8s/k8s17.png",alt:""}}),e("br")]),s._v(" "),e("h3",{attrs:{id:"扩展测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展测试"}},[s._v("#")]),s._v(" 扩展测试")]),s._v(" "),e("p",[s._v("以上测试，web的service其实还是NodePort类型。也就是说，它既可以通过node\n的IP+端口访问，也可通过后面配置的ingress域名去访问。我们现在把service\n设置成ClusterIP类型，让其只拥有集群内部访问的规则。然后再通过ingress\n的域名去访问，看看这种情况下还能否生效。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('# 删除原有的名为web的service\n[root@k8s-master ~]# kubectl delete svc/web\nservice "web" deleted\n\n# 创建类型为ClusterIP的service,还命名为web\n[root@k8s-master ~]# kubectl expose --name=web deployment web --port=80 --target-port=8080 --type=ClusterIP\nservice/web exposed\n\n# 查看service\n[root@k8s-master ~]# kubectl get svc\nNAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE\nkubernetes   ClusterIP   10.1.0.1      <none>        443/TCP   3d21h\nweb          ClusterIP   10.1.71.141   <none>        80/TCP    23s\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("我们再去通过node的ip+端口去访问肯定是不行了，不是NodePort，端口\n也就不分配了。然后再通过域名访问，还可以正常访问。这就说明，ingress\n将请求分发到servcie上属于集群内部的访问。它不需要具体的业务pod拥有\n直接对外的暴露的权限。\n"),e("img",{attrs:{src:"/images/k8s/k8s18.png",alt:""}}),e("br")])])}),[],!1,null,null,null);n.default=a.exports}}]);