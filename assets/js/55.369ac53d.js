(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{409:function(s,e,a){"use strict";a.r(e);var n=a(42),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"service统一访问入口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service统一访问入口"}},[s._v("#")]),s._v(" Service统一访问入口")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"service存在的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service存在的意义"}},[s._v("#")]),s._v(" Service存在的意义")]),s._v(" "),a("p",[s._v("• 防止Pod失联（服务发现）"),a("br"),s._v("\n• 定义一组Pod的访问策略（负载均衡）"),a("br")]),s._v(" "),a("h2",{attrs:{id:"pod与servcie的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod与servcie的关系"}},[s._v("#")]),s._v(" Pod与Servcie的关系")]),s._v(" "),a("p",[s._v("• 通过label-selector相关联\n• 通过Service实现Pod的负载均衡（ TCP/UDP 4层）\n"),a("img",{attrs:{src:"/images/k8s/k8s11.png",alt:""}}),a("br")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('apiVersion: v1\nkind: Service\nmetadata:\n  creationTimestamp: "2019-12-10T07:49:37Z"\n  ##########################################################\n  # 这是一个标签只有一个键值对 app: web\n  # 可以写多个，区分唯一性\n  labels:\n    app: web\n  ##########################################################\n  name: web\n  namespace: default\n  resourceVersion: "152754"\n  selfLink: /api/v1/namespaces/default/services/web\n  uid: 5ad1889d-094d-4f96-a4ac-4499be6b8ce7\nspec:\n  clusterIP: 10.1.150.171\n  externalTrafficPolicy: Cluster\n  ports:\n  - nodePort: 32507\n    port: 80\n    protocol: TCP\n    targetPort: 8080\n  ##########################################################\n  # 这是一个选择器，它只有一个键值对app: web\n  # 这个选择器指向一个deployment:web\n  # 如果deployment标签是多个，选择器也可以写多个\n  # 确保唯一性即可\n  selector:\n    app: web\n  ##########################################################\n  sessionAffinity: None\n  type: NodePort\nstatus:\n  loadBalancer: {}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h2",{attrs:{id:"service几种类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service几种类型"}},[s._v("#")]),s._v(" Service几种类型")]),s._v(" "),a("h3",{attrs:{id:"clusterip-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clusterip-类型"}},[s._v("#")]),s._v(" ClusterIP 类型")]),s._v(" "),a("p",[s._v("分配一个内部集群IP地址，只能在集群内部访问（同Namespace内的Pod），\n默认ServiceType。ClusterIP 模式的 Service 为你提供的，就是一个\nPod 的稳定的 IP 地址，即 VIP。"),a("br"),s._v(" "),a("img",{attrs:{src:"/images/k8s/k8s12.png",alt:""}}),a("br")]),s._v(" "),a("h3",{attrs:{id:"nodeport-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodeport-类型"}},[s._v("#")]),s._v(" NodePort 类型")]),s._v(" "),a("p",[s._v("分配一个内部集群IP地址，并在每个node上创建一个端口，用node的ip+端\n口访问这台node主机上的一组pod,继而再转发到具体的某个pod。很明显，\n这样指定IP+端口的访问方式，会造成某个节点的大量访问。一般的，都是\n在节点外加一层LB做负载均衡。用户访问LB，由LB去分发到具体的节点上，\n继而分发的具体的pod上。"),a("br"),s._v(" "),a("img",{attrs:{src:"/images/k8s/k8s13.png",alt:""}}),a("br")]),s._v(" "),a("h3",{attrs:{id:"loadbalancer-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loadbalancer-类型"}},[s._v("#")]),s._v(" LoadBalancer 类型")]),s._v(" "),a("p",[s._v("主要是公有云平台在使用。分配一个内部集群IP地址，并在每个节点上启\n用一个端口来暴露服务。除此之外，Kubernetes会请求底层云平台上的负\n载均衡器，将每个Node（[NodeIP]:[NodePort]）作为后端添加进去。"),a("br"),s._v(" "),a("img",{attrs:{src:"/images/k8s/k8s14.png",alt:""}}),a("br")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 查看命名空间\n[root@k8s-master ~]# kubectl get svc\nNAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\njava-demo    NodePort    10.1.153.127   <none>        80:30157/TCP   47h\nkubernetes   ClusterIP   10.1.0.1       <none>        443/TCP        3d16h\nnginx        NodePort    10.1.138.213   <none>        80:30510/TCP   3d15h\nweb          NodePort    10.1.150.171   <none>        80:32507/TCP   103m\n[root@k8s-master ~]# kubectl get svc -n kube-system\nNAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                  AGE\nkube-dns               ClusterIP   10.1.0.10      <none>        53/UDP,53/TCP,9153/TCP   3d17h\nkubernetes-dashboard   NodePort    10.1.143.245   <none>        443:30001/TCP            2d21h\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"创建service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建service"}},[s._v("#")]),s._v(" 创建service")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 命令行创建\n# --name=web 指定service名称，不指定默认和deployment的名称(这里是web)一致\n# --port=80 service的端口，k8s集群内部使用\n# --target-port=8080 容器应用的端口(这个应用是tomcat,一般默认是8080)\n# --type=NodePort nodeport类型会分配一个随机的端口给到集群外部访问\nkubectl expose --name=web deployment web --port=80 --target-port=8080 --type=NodePort \n\n# yaml文件方式创建\n# --dry--run 不提交到集群，检查是否可运行\n# -o yaml 输出yaml文件格式\n# > web-sercice.yaml 输出重定向到名为web-service.yaml的文件\nkubectl expose --name=web deployment web --port=80 --target-port=8080 --type=NodePort --dry-run -o yaml > web-service.yaml\n\n# 查看所有service\nkubectl get service\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"service转发到pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service转发到pod"}},[s._v("#")]),s._v(" service转发到pod")]),s._v(" "),a("p",[s._v("service转发到pod上，默认是使用的iptables实现的负载均衡。iptables\n内部维护一张规则表，当规则越来越多时，pod频繁变更时，iptables从表中\n匹配规则的效率会降低。(k8s后面引入了lvs，专门负责大并发的负载均衡)")])])}),[],!1,null,null,null);e.default=t.exports}}]);