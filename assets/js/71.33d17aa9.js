(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{425:function(n,a,e){"use strict";e.r(a);var s=e(42),t=Object(s.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"spring-bean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean"}},[n._v("#")]),n._v(" spring-bean")]),n._v(" "),e("hr"),n._v(" "),e("h2",{attrs:{id:"xml容器bean注册流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xml容器bean注册流程"}},[n._v("#")]),n._v(" XML容器Bean注册流程")]),n._v(" "),e("h3",{attrs:{id:"封装配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装配置文件"}},[n._v("#")]),n._v(" 封装配置文件")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('BeanFactory bf = new XmlBeanFactory(new ClassPathResource("beanFactoryTest.xml"));\n通过使用Spring中的Resource(ClassPathResource示例)接口封装配置资源\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("h3",{attrs:{id:"转化为document"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转化为document"}},[n._v("#")]),n._v(" 转化为Document")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("loadBeanDefinition(new EncodedResource(resource));\n通过EncodedResource将resource编码\n\ndoLoadBeanDefinition(inputSource,encodedResource.getResource());\ninputSource是通过EncodedResource处理后的流\n\n下面三步是在doLoadBeanDefinition()这个方法中\n1.getValidationModeForResource(resource)\n验证xml文件\n\n2.this.documentLoader.loadDocument(....)\n将xml处理后，得到封装bean信息的document对象\n\n3.registerBeanDefinitions(doc,resource)\n从这里开始去解析并注册BeanDefinitions\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("h3",{attrs:{id:"解析前后自定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析前后自定义"}},[n._v("#")]),n._v(" 解析前后自定义")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("DefaultBeanDefinitionDocumentReader实际解析器\n\n在doRegisterBeanDefinitions(root)方法中，root来自于上面得到Document对象\nElement root = doc.getDocumentElement();\n\n这里实际处理时，开发人员留了两个后门。\n1.解析前处理,默认类没有实现\npreProcessXml(root);\n2.解析最终处理方法\nparseBeanDefinitions(root,this.delegate);\n3.解析后处理，默认类没有实现\npostProcessXml(root);\n\n注意：如果需要对解析前、后做处理，需要继承DefaultBeanDefinitionDocumentReader\n重写preProcessXml和postProcessXml\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("h3",{attrs:{id:"parsebeandefinitions方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parsebeandefinitions方法"}},[n._v("#")]),n._v(" parseBeanDefinitions方法")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n    if (delegate.isDefaultNamespace(root)) {\n        NodeList nl = root.getChildNodes();\n        for (int i = 0; i < nl.getLength(); i++) {\n            Node node = nl.item(i);\n            if (node instanceof Element) {\n                Element ele = (Element) node;\n                if (delegate.isDefaultNamespace(ele)) {\n                \n                    // 默认Bean解析   ##########\n                    parseDefaultElement(ele, delegate);\n                }\n                else {\n                \n                    // 自定义Bean解析   ##########\n                    delegate.parseCustomElement(ele);\n                }\n            }\n        }\n    }\n    else {\n    \n        // 自定义Bean解析   ##########\n        delegate.parseCustomElement(root);\n    }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br")])]),e("h3",{attrs:{id:"默认bean解析和注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认bean解析和注册"}},[n._v("#")]),n._v(" 默认Bean解析和注册")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {\n    // import标签的处理\n    if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {\n        importBeanDefinitionResource(ele);\n    }\n    // alias标签的处理\n    else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {\n        processAliasRegistration(ele);\n    }\n    // bean标签的处理\n    else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {\n        processBeanDefinition(ele, delegate);\n    }\n    // beans标签的处理\n    else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {\n        // recurse\n        doRegisterBeanDefinitions(ele);\n    }\n}\n\n####### Bean标签的处理 #######\nprotected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {\n    // (1)\n    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);\n    if (bdHolder != null) {\n        // (2)\n        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);\n        try {\n            // Register the final decorated instance.\n            // (3)\n            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());\n        }\n        catch (BeanDefinitionStoreException ex) {\n            getReaderContext().error("Failed to register bean definition with name \'" +\n                    bdHolder.getBeanName() + "\'", ele, ex);\n        }\n        // Send registration event.\n        // (4)\n        getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));\n    }\n}\n1.委托BeanDefinitionDelegate类的parseBeanDefinitionElement方法进行元素解析，返回\n    BeanDefinitionHolder类的实例\n2.如果BeanDefinitionHolder类的实例不为空，且存在默认标签的子节点有自定义属性，需要对\n    自定义属性解析\n3.委托给BeanDefinitionReaderUtils的registerBeanDefinition进行注册\n4.发出响应事件，通知相关监听器，该bean加载完毕\n需要注意的是：\n        1)如果bean没有设置name,在解析属性前，会用默认规则生成一个beanName\n        2)注册到BeanDefinitionRegistry中，是以map的形式存储，key是beanName\n        3)beanName设置不允许重复，如果注册中发生重名注册。会抛出异常\n        4)alias别名注。与原名一样用原名。别名存在会覆盖，这时需要用户自己处理。\n            a->b存在时，a->c->b抛出异常。\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br")])]),e("h2",{attrs:{id:"bean加载流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean加载流程"}},[n._v("#")]),n._v(" Bean加载流程")]),n._v(" "),e("p",[n._v("加载过程大致归纳为以下9个步骤")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("转换对应beanName"),e("br"),n._v("\n或许很多人不理解转换对应beanName是什么意思，传入的参数name不就是beanName吗？其实不是，这里传入的参数可能是别名，\n也可能是FactoryBean，所以需要进行一些列的解析，这些解析内容包括如下内容：")]),n._v(" "),e("ul",[e("li",[n._v('去除FactoryBean的修饰符，也就是如果name="&aa",name会首先去除&而使name="aa".')]),n._v(" "),e("li",[n._v("取指定alias所表示的最终beanName,例如别名A指向名称为B的bean则返回B；若别名A指向别名B，别名B又指向名称为C的bean，\n则返回C")])])]),n._v(" "),e("li",[e("p",[n._v("尝试从缓存中加载单例"),e("br"),n._v("\n单例在Spring的痛一个容器内只会被创建一次，后续再获取bean，就直接从单例缓存中获取了。当然这里也只是尝试加载，首先尝试从\n缓存中加载，如果加载不成功则再次尝试从singletonFactories中加载。因为在创建单例bean的时候会存在依赖注入的情况，而在创建\n依赖的时候为了避免循环依赖，在Spring中创建bean的原则是不等bean创建完成就会将创建bean的ObjectFactory提早曝光加入到缓存中，\n一旦下一个bean创建时候需要依赖上一个bean则直接使用ObjectFactory")])]),n._v(" "),e("li",[e("p",[n._v("bean的实例化"),e("br"),n._v("\n如果从缓存中得到了bean的原始状态，则需要对bean进行实例化。这里有必要强调一下，缓存中记录的知识最原始的bean状态，并不一定是\n我们最终想要的bean。举个例子，假如我们需要对工厂bean进行处理，那么这里得到的其实是工厂bean的初始状态，但是我们真正需要的是工厂\nbean中定义的factory-method方法中返回的bean,而getObjectForBeanInstance就是完成这个工作的，后续会详细讲解。")])]),n._v(" "),e("li",[e("p",[n._v("原型模式的依赖检查"),e("br"),n._v("\n只有在单例情况下才会尝试解决循环依赖，如果存在A中有B的属性，B中有A的属性，那么当依赖注入的时候，就会产生当A还未创建完的时候因为\n对于B的创建再次返回创建A，造成循环依赖，也就是isPrototypeCurrentlyInCreation(beanName)判断true。")])]),n._v(" "),e("li",[e("p",[n._v("检测parentBeanFactory"),e("br"),n._v("\n从代码上看，如果缓存没有数据的话直接转到父类工厂上去加载了，这是为什么呢？可能读者忽略了一个很重要的判断条件：parentBeanFactory!=\nnull && containsBeanDefinition(beanName) , parentBeanFactory!=null 。parentBeanFactory如果为空，则其他一切都是浮云，这个没什么\n说的，但是 !containsBeanDefinition(beanName)就比较重要了，它是在检测如果当前加载的XML配置文件中不包含beanName所对应的配置，就只\n能到parentBeanFactory去尝试下了，然后再去递归的调用getBean方法")])]),n._v(" "),e("li",[e("p",[n._v("将存储XML配置文件的GernericBeanDefinition转换为RootBeanDefinition"),e("br"),n._v("\n因为从XML配置文件中读取到的bean信息是存储在GernericBeanDefinition中的，但是所有的bean后续处理都是针对于RootBeanDefinition的，\n所以这里需要进行一个转换，转换的同时如果父类bean不为空的话，则会一并合并父类的属性")])]),n._v(" "),e("li",[e("p",[n._v("寻找依赖"),e("br"),n._v("\n因为bean的初始化过程中很可能会用到某些属性，而某些属性很可能是动态配置的，并且配置成依赖于其他的bean，那么这个时候就有必要先加载\n依赖的bean, 所以 ，在Spring的加载顺寻中，在初始化某一个bean的时候首先会初始化这个bean所对应的依赖。")])]),n._v(" "),e("li",[e("p",[n._v("针对不同的scope进行bean的创建"),e("br"),n._v("\n我们知道，在Spring中存在着不同的scope,其中默认的是singleton,但是还有些其他的配置诸如prototype,request之类的。在这个步骤中，Spring\n会根据不同的配置进行不同的初始化策略。")])]),n._v(" "),e("li",[e("p",[n._v("类型转换"),e("br"),n._v("\n程序到这里返回bean后已经基本结束了，通常对该方法的调用参数requiredType是为空的，但是可能会存在这样的情况，返回的bean其实是个String\n,但是requiredType却传入Integer类型，那么这个时候本步骤就会起作用了，它的功能是返回的bean转换为requiredType所指定的类型。当然，String\n转换为Integer是最简单的一种转换，在Spring中提供了各种各样的转换器，用户也可以自己扩展转换器来满足需求。")])])]),n._v(" "),e("h2",{attrs:{id:"aop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[n._v("#")]),n._v(" AOP")]),n._v(" "),e("h3",{attrs:{id:"两种代理方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两种代理方式"}},[n._v("#")]),n._v(" 两种代理方式")]),n._v(" "),e("ul",[e("li",[n._v("JDK动态代理：需要被代理类实现至少一个接口")]),n._v(" "),e("li",[n._v("cgLib代理：被代理类是可继承的")]),n._v(" "),e("li",[n._v("那么JDK代理和CGLib代理我们该用哪个呢？？在《精通Spring4.x 企业应用开发实战》给出了建议：\n如果是单例的我们最好使用CGLib代理，如果是多例的我们最好使用JDK代理\n"),e("ul",[e("li",[n._v("原因：\nJDK在创建代理对象时的性能要高于CGLib代理，而生成代理对象的运行性能却比CGLib的低。\n如果是单例的代理，推荐使用CGLib")])])])]),n._v(" "),e("h3",{attrs:{id:"aop术语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop术语"}},[n._v("#")]),n._v(" AOP术语")]),n._v(" "),e("ul",[e("li",[n._v("连接点(Join point)："),e("br"),n._v("\n能够被拦截的地方：Spring AOP是基于动态代理的，所以是方法拦截的。每个成员方法都可以称之为连接点~")]),n._v(" "),e("li",[n._v("切点(Poincut)："),e("br"),n._v("\n具体定位的连接点：上面也说了，每个方法都可以称之为连接点，我们具体定位到某一个方法就成为切点。")]),n._v(" "),e("li",[n._v("增强/通知(Advice)："),e("br"),n._v("\n表示添加到切点的一段逻辑代码，并定位连接点的方位信息。\n简单来说就定义了是干什么的，具体是在哪干\nSpring AOP提供了5种Advice类型给我们：前置、后置、返回、异常、环绕给我们使用！")]),n._v(" "),e("li",[n._v("织入(Weaving)："),e("br"),n._v("\n将增强/通知添加到目标类的具体连接点上的过程。\n引入/引介(Introduction)："),e("br"),n._v("\n引入/引介允许我们向现有的类添加新方法或属性。是一种特殊的增强！")]),n._v(" "),e("li",[n._v("切面(Aspect)："),e("br"),n._v("\n切面由切点和增强/通知组成，它既包括了横切逻辑的定义、也包括了连接点的定义。")])]),n._v(" "),e("h3",{attrs:{id:"sping对aop的三种支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sping对aop的三种支持"}},[n._v("#")]),n._v(" Sping对aop的三种支持")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("基于代理的经典SpringAop: 需要实现接口，手动创建代理")])]),n._v(" "),e("li",[e("p",[n._v("纯POJO切面: 使用XML配置，aop命名空间")])]),n._v(" "),e("li",[e("p",[n._v("@AspectJ注解驱动的切面: 推荐注解，简洁\n"),e("img",{attrs:{src:"/images/interview/spring-2.jpg",alt:""}}),e("br")])])]),n._v(" "),e("h2",{attrs:{id:"spring事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring事务"}},[n._v("#")]),n._v(" Spring事务")]),n._v(" "),e("h3",{attrs:{id:"事务的acid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务的acid"}},[n._v("#")]),n._v(" 事务的ACID")]),n._v(" "),e("ul",[e("li",[n._v("原子性： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；")]),n._v(" "),e("li",[n._v("一致性： 执行事务前后，数据保持一致；")]),n._v(" "),e("li",[n._v("隔离性： 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；")]),n._v(" "),e("li",[n._v("持久性:  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。")])]),n._v(" "),e("h3",{attrs:{id:"spring事务管理接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring事务管理接口"}},[n._v("#")]),n._v(" Spring事务管理接口")]),n._v(" "),e("h4",{attrs:{id:"platformtransactionmanager"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#platformtransactionmanager"}},[n._v("#")]),n._v(" PlatformTransactionManager")]),n._v(" "),e("p",[n._v("（平台）事务管理器"),e("br"),n._v("\nSpring并不直接管理事务，而是提供了多种事务管理器 ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事\n务来实现。 Spring事务管理器的接口是： org.springframework.transaction.PlatformTransactionManager ，通过这个接口，Spring为各\n个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。")]),n._v(" "),e("ul",[e("li",[n._v("接口方法")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Public interface PlatformTransactionManager()...{  \n\n  // Return a currently active transaction or create a new one, according to the specified propagation behavior\n  //（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n  TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n  \n  // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n  Void commit(TransactionStatus status) throws TransactionException;  \n  \n  // Perform a rollback of the given transaction（对执行的事务进行回滚）\n  Void rollback(TransactionStatus status) throws TransactionException;  \n  \n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("ul",[e("li",[n._v("不同持久层框架对应的实现类\n"),e("img",{attrs:{src:"/images/interview/spring-3.png",alt:""}}),e("br")])]),n._v(" "),e("h4",{attrs:{id:"transactiondefinition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transactiondefinition"}},[n._v("#")]),n._v(" TransactionDefinition")]),n._v(" "),e("p",[n._v("事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)"),e("br"),n._v("\n事务管理器接口 PlatformTransactionManager 通过 getTransaction(TransactionDefinition definition) 方法来得到一个事务，这个\n方法里面的参数是 TransactionDefinition类 ，这个类就定义了一些基本的事务属性。事务属性包含五个方面：隔离级别，传播行为，回滚规则，\n是否只读，事务超时。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("ul",[e("li",[e("p",[n._v("TransactionDefinition 接口中定义了五个表示隔离级别的常量：")]),n._v(" "),e("ul",[e("li",[n._v("TransactionDefinition.ISOLATION_DEFAULT:\t"),e("br"),n._v("\n使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.")]),n._v(" "),e("li",[n._v("TransactionDefinition.ISOLATION_READ_UNCOMMITTED: "),e("br"),n._v("\n最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读")]),n._v(" "),e("li",[n._v("TransactionDefinition.ISOLATION_READ_COMMITTED: \t"),e("br"),n._v("\n允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生")]),n._v(" "),e("li",[n._v("TransactionDefinition.ISOLATION_REPEATABLE_READ: \t"),e("br"),n._v("\n对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。")]),n._v(" "),e("li",[n._v("TransactionDefinition.ISOLATION_SERIALIZABLE: \t"),e("br"),n._v("\n最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。")])])]),n._v(" "),e("li",[e("p",[n._v("TransactionDefinition定义中包括了如下几个表示传播行为的常量")]),n._v(" "),e("ul",[e("li",[n._v("支持当前事务的情况：\n"),e("ul",[e("li",[n._v("TransactionDefinition.PROPAGATION_REQUIRED："),e("br"),n._v(" 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。")]),n._v(" "),e("li",[n._v("TransactionDefinition.PROPAGATION_SUPPORTS："),e("br"),n._v(" 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。")]),n._v(" "),e("li",[n._v("TransactionDefinition.PROPAGATION_MANDATORY："),e("br"),n._v(" 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）")])])]),n._v(" "),e("li",[n._v("不支持当前事务的情况：\n"),e("ul",[e("li",[n._v("TransactionDefinition.PROPAGATION_REQUIRES_NEW："),e("br"),n._v(" 创建一个新的事务，如果当前存在事务，则把当前事务挂起。")]),n._v(" "),e("li",[n._v("TransactionDefinition.PROPAGATION_NOT_SUPPORTED："),e("br"),n._v(" 以非事务方式运行，如果当前存在事务，则把当前事务挂起。")]),n._v(" "),e("li",[n._v("TransactionDefinition.PROPAGATION_NEVER："),e("br"),n._v(" 以非事务方式运行，如果当前存在事务，则抛出异常。")])])]),n._v(" "),e("li",[n._v("其他情况：\n"),e("ul",[e("li",[n._v("TransactionDefinition.PROPAGATION_NESTED："),e("br"),n._v(" 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。")])])])])])]),n._v(" "),e("h4",{attrs:{id:"transactionstatus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transactionstatus"}},[n._v("#")]),n._v(" TransactionStatus")]),n._v(" "),e("p",[n._v("事务运行状态。该接口定义了一组方法,用来获取或判断事务的相应状态信息.\nPlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个\n新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface TransactionStatus{\n    boolean isNewTransaction(); // 是否是新的事物\n    boolean hasSavepoint(); // 是否有恢复点\n    void setRollbackOnly();  // 设置为只回滚\n    boolean isRollbackOnly(); // 是否为只回滚\n    boolean isCompleted; // 是否已完成\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);