(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{404:function(s,n,e){"use strict";e.r(n);var a=e(42),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"流水线-pipeline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流水线-pipeline"}},[s._v("#")]),s._v(" 流水线-Pipeline")]),s._v(" "),e("hr"),s._v(" "),e("h2",{attrs:{id:"什么是pipeline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是pipeline"}},[s._v("#")]),s._v(" 什么是Pipeline")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/jenkins/jenkins10.png",alt:""}}),e("br"),s._v("\nPipeline，简而言之，就是一套运行于Jenkins上的工作流框架，将原本独立运行于\n单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排与可视\n化。"),e("br"),s._v("\n一个Pipeline包含多个stage,如上图，一个stage对应一个步骤。每个步骤封装了\n一组可执行的脚本。Pipeline脚本是由Groovy语言实现的。"),e("br"),s._v(" "),e("a",{attrs:{href:"https://www.w3cschool.cn/jenkins/jenkins-epas28oi.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Pipeline参考文档"),e("OutboundLink")],1),e("br"),s._v(" "),e("a",{attrs:{href:"https://www.w3cschool.cn/groovy/groovy_basic_syntax.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Groovy基础语法"),e("OutboundLink")],1),e("br")]),s._v(" "),e("h2",{attrs:{id:"创建流水线任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建流水线任务"}},[s._v("#")]),s._v(" 创建流水线任务")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/jenkins/jenkin-9.gif",alt:""}}),e("br"),s._v("\n我们先创建一个空的流水线任务，下面再演示如何写pipeline的步骤脚本。")]),s._v(" "),e("h2",{attrs:{id:"测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[s._v("#")]),s._v(" 测试")]),s._v(" "),e("h3",{attrs:{id:"简单脚本测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单脚本测试"}},[s._v("#")]),s._v(" 简单脚本测试")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/jenkins/jenkin-10.gif",alt:""}}),e("br")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('node {\n   def branch = env.branch\n   stage(\'拉代码\') { \n       echo "分支->"+branch+",拉取代码开始..."\n       sleep 3\n       echo "拉取代码结束..."\n   }\n   stage(\'打包\') {\n       echo "打包开始..."\n       sleep 3\n       echo "打包结束..."\n   }\n   stage(\'部署\') {\n       echo "部署开始..."\n       sleep 2\n       echo "部署结束..."\n   }\n   stage(\'单元测试 \') {\n       echo "测试开始..."\n       sleep 2\n       echo "测试结束..."\n   }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[s._v("这是一个包含4个stage的流水线任务。其中env.branch是获取参数构建设置的branch\n变量的值。def branch是定义一个branch变量，仅在当前这个脚本中使用。使用sleep\n模拟了一下执行的过程。动图中也演示了，可用选项得到一些脚本模板。"),e("br"),s._v("\n下面我们测试一些如何编写从git仓库拉代码的脚本。")]),s._v(" "),e("h3",{attrs:{id:"拉取git中代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拉取git中代码"}},[s._v("#")]),s._v(" 拉取Git中代码")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/jenkins/jenkin-11.gif",alt:""}}),e("br")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("checkout([$class: 'GitSCM', branches: [[name: branch]], \n    doGenerateSubmoduleConfigurations: false, extensions: [], \n    submoduleCfg: [], userRemoteConfigs: \n    [[url: 'git@192.168.163.105:/home/git/repos/app.git']]])\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v('如上演示，我们在配置页面找到“流水线语法”这个入口。进入语法帮助页面后\n你可以搜索你想要的语法模板。比如这里，我们需要从版本控制器中拉取代码，\n那么就可以选择"checkout:Check out from version control"。这个选项的字面意思\n就很清楚了，它是干嘛的了。然后填入git地址，branch默认就行，反正构建的时候\n我们会确认填入正确的分支。当然，branch参数，你可以参考前面参数构建那一篇，把\nbranch参数设置成可选的自动更新的分支选择器就行。注意把checkout脚本里面写死的\nbranch的值，替换成变量，就可以满足我们需求了。')]),s._v(" "),e("h3",{attrs:{id:"脚本文件的版本控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#脚本文件的版本控制"}},[s._v("#")]),s._v(" 脚本文件的版本控制")]),s._v(" "),e("h4",{attrs:{id:"创建脚本文件仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建脚本文件仓库"}},[s._v("#")]),s._v(" 创建脚本文件仓库")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('# 在Git服务器上创建一个脚本文件仓库\n[root@host105 ~]# su - git\nLast login: Fri Dec 13 17:42:11 CST 2019 on pts/0\n[git@host105 ~]$ cd repos/\n[root@host105 ~]# su - git\nLast login: Fri Dec 13 17:42:11 CST 2019 on pts/0\n[git@host105 ~]$ cd repos/\n[git@host105 repos]$ mkdir jenkinsfile.git\n[git@host105 repos]$ cd jenkinsfile.git/\n[git@host105 jenkinsfile.git]$ git --bare init\nInitialized empty Git repository in /home/git/repos/jenkinsfile.git/\n\n# 在测试服务器上，将脚本文件推送到Git服务器\n[root@host103 ~]# git clone git@192.168.163.105:/home/git/repos/jenkinsfile.git\nCloning into \'jenkinsfile\'...\nwarning: You appear to have cloned an empty repository.\n[root@host103 ~]# cd jenkinsfile/\n[root@host103 jenkinsfile]# mkdir pipeline-test\n[root@host103 jenkinsfile]#  cd pipeline-test/\n[root@host103 pipeline-test]# vi file1\n========================================================\nnode {\n   def branch = env.branch\n   stage(\'拉代码\') { \n       echo "分支->"+branch+",拉取代码开始..."\n       checkout([$class: \'GitSCM\', branches: [[name: branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: \'git@192.168.163.105:/home/git/repos/app.git\']]])\n       echo "拉取代码结束..."\n   }\n   stage(\'打包\') {\n       echo "打包开始..."\n       sleep 3\n       echo "打包结束..."\n   }\n   stage(\'部署\') {\n       echo "部署开始..."\n       sleep 2\n       echo "部署结束..."\n   }\n   stage(\'单元测试 \') {\n       echo "测试开始..."\n       sleep 2\n       echo "测试结束..."\n   }\n}\n========================================================\n[root@host103 pipeline-test]# cd ..\n[root@host103 jenkinsfile]# git add .\n[root@host103 jenkinsfile]# git commit -m "jenkinsfile"\n[master (root-commit) 997cc9f] jenkinsfile\n 1 file changed, 23 insertions(+)\n create mode 100644 pipeline-test/file1\n[root@host103 jenkinsfile]# git push origin master\nCounting objects: 4, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (4/4), 600 bytes | 0 bytes/s, done.\nTotal 4 (delta 0), reused 0 (delta 0)\nTo git@192.168.163.105:/home/git/repos/jenkinsfile.git\n * [new branch]      master -> master\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br")])]),e("h4",{attrs:{id:"测试脚本文件读取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试脚本文件读取"}},[s._v("#")]),s._v(" 测试脚本文件读取")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/jenkins/jenkin-12.gif",alt:""}}),e("br"),s._v("\n如上演示：我们的流水线脚本不再是写到配置页面，而是从Git仓库中读取。这样就有利于\n我们管理脚本文件的版本，比如你对不同的分支，流水线执行的步骤有些许变化，那么\n你需要修改脚本。那么现在由了脚本管控，你只需要在git中更换文件就可以了。"),e("br"),s._v("\n上面需要注意的就是，我们创建了git仓库jenkinsfile.git去管理文件。。但是\n在脚本路径输入框，注意你的脚本文件所在的目录，比如我这\n里：pipeline-test/file1"),e("br")]),s._v(" "),e("h2",{attrs:{id:"小结与展望"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结与展望"}},[s._v("#")]),s._v(" 小结与展望")]),s._v(" "),e("p",[s._v("到这里我们已经基本掌握了docker,k8s,jenkins的基本用法。特别是到现在了解到了\npipeline流水线这种处理流程，后面我们去结合maven打包java项目，然后通过docker\n制作镜像，然后在把镜像推送到我们Harbor仓库，在之后就是用k8s拉取harbor镜像去\n部署项目，最后暴露项目入口去使用。这一系列的流程化操作，相信到现在我们多多少少\n有了一些概念。后面我们在pipeline脚本中去一步步完成这些步骤。以至于最终做出一个\nCI&CD系统的雏形。")])])}),[],!1,null,null,null);n.default=t.exports}}]);