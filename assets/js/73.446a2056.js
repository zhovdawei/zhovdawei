(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{429:function(e,n,t){"use strict";t.r(n);var s=t(42),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"spring-mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[e._v("#")]),e._v(" spring-mvc")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("spring的mvc是基于Servlet功能实现的，通过实现Servlet接口的DispatcherServlet来封装其核心功能。")]),e._v(" "),t("h2",{attrs:{id:"springmvc体验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmvc体验"}},[e._v("#")]),e._v(" SpringMVC体验")]),e._v(" "),t("ul",[t("li",[e._v("web.xml\n"),t("ul",[t("li",[e._v("contentConfigLocation: Spring的狠心就是配置文件，可以说配置文件是Spring中必不可少的东西，而这个参数就是\nweb与Spring的配置文件相结合的一个关键配置")]),e._v(" "),t("li",[e._v("DispatcherServlet: 包含了SpringMVC的请求逻辑，Spring使用此类拦截web请求并进行相应的逻辑处理")])])]),e._v(" "),t("li",[e._v("applicationContext.xml : 配置视图存在的位置，配置前缀和后缀")])]),e._v(" "),t("h3",{attrs:{id:"contextloaderlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contextloaderlistener"}},[e._v("#")]),e._v(" ContextLoaderListener")]),e._v(" "),t("ul",[t("li",[e._v("ContextLoaderListener(spring) 实现 ServletContextListener(tomcat)\n"),t("ul",[t("li",[e._v("在contextInitialized(ServletContextEvent event)方法中，创建了springmvc的容器WebApplicationContext "),t("br"),e._v("\n(内部配置的是这个实现类org.springframework.web.context.support.XmlWebApplicationContext)")])])]),e._v(" "),t("li",[e._v("DispatcherServlet\n"),t("ul",[t("li",[e._v("静态代码块(默认配置文件)")]),e._v(" "),t("li",[e._v("onRefresh 初始化9大组件")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  initMultipartResolver(context);                      // 文件上传\n  initLocaleResolver(context);                         // 国际化配置\n  initThemeResolver(context);                          // 主题资源配置\n  initHandlerMappings(context);                        // 请求映射\n  initHandlerAdapters(context);                        // 请求处理适配器\n  initHandlerExceptionResolvers(context);              // 异常处理\n  initRequestToViewNameTranslator(context);            // 逻辑视图\n  initViewResolvers(context);                          // 视图渲染\n  initFlashMapManager(context);                        // 请求存储管理\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("ul",[t("li",[t("p",[e._v("initHandlerMappings(context)")]),e._v(" "),t("ul",[t("li",[e._v("urlLookup(map) : key=url,value=LinkedList(存储 {GET requestUrl} )")]),e._v(" "),t("li",[e._v("mappingLookup(map) : key={GET requestUrl},value=com.hb.controller.TestController#testM()")])])]),e._v(" "),t("li",[t("p",[e._v("initHandlerAdapters : 根据handlerMapping初始化适配器")]),e._v(" "),t("ul",[t("li",[e._v("HttpRequestHandlerAdapter")]),e._v(" "),t("li",[e._v("SimpleControllerHandlerAdapter")]),e._v(" "),t("li",[e._v("AnnotationMethodHandlerAdapter")]),e._v(" "),t("li",[e._v("RequestMappingHandlerAdapter")])])]),e._v(" "),t("li",[t("p",[e._v("doService 请求处理方法")]),e._v(" "),t("ul",[t("li",[e._v("doDispatch 实际调用handlerMapping处理"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  //假设配置了拦截器 顺序为a,b,c\n  //拦截器前置处理，多个拦截器前置处理为正序执行\n  if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n      return;\n  }\n\n  // Actually invoke the handler.\n  mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n  if (asyncManager.isConcurrentHandlingStarted()) {\n      return;\n  }\n\n  applyDefaultViewName(processedRequest, mv);\n  //拦截器后置处理，多个拦截器后置处理为倒序执行\n  mappedHandler.applyPostHandle(processedRequest, response, mv);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br")])])])])]),e._v(" "),t("li",[t("p",[e._v("参数绑定\nha.handle() -> handleInternal() -> invokeHandlerMethod -> invokeAndHandle() -> invokeForRequest")])])])])])])}),[],!1,null,null,null);n.default=a.exports}}]);