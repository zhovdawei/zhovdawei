(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{420:function(s,a,n){"use strict";n.r(a);var e=n(42),l=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"java反射知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java反射知识"}},[s._v("#")]),s._v(" Java反射知识")]),s._v(" "),n("hr"),s._v(" "),n("h2",{attrs:{id:"java反射机制概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java反射机制概述"}},[s._v("#")]),s._v(" Java反射机制概述")]),s._v(" "),n("h3",{attrs:{id:"java-reflection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-reflection"}},[s._v("#")]),s._v(" Java Reflection")]),s._v(" "),n("ul",[n("li",[s._v("Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期\n借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内\n部属性及方法。")]),s._v(" "),n("li",[s._v("加载完类之后， 在堆内存的方法区中就产生了一个Class类型的对象（一个\n类只有一个Class对象） ， 这个对象就包含了完整的类的结构信息。 我们可\n以通过这个对象看到类的结构。 这个对象就像一面镜子， 透过这个镜子看\n到类的结构， 所以， 我们形象的称之为： 反射。\n"),n("img",{attrs:{src:"/images/interview/iw-13.png",alt:""}}),n("br")])]),s._v(" "),n("h3",{attrs:{id:"动态与静态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态与静态"}},[s._v("#")]),s._v(" 动态与静态")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("动态语言")]),n("br"),s._v("\n是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以\n被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运\n行时代码可以根据某些条件改变自身结构。\n主要动态语言： Object-C、 C#、 JavaScript、 PHP、 Python、 Erlang。")]),s._v(" "),n("li",[n("strong",[s._v("静态语言")]),n("br"),s._v("\n与动态语言相对应的， 运行时结构不可变的语言就是静态语言。如Java、 C、\nC++。")])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v("Java不是动态语言， 但Java可以称之为“准动态语言” 。 即Java有一定的动\n态性， 我们可以利用反射机制、 字节码操作获得类似动态语言的特性。\nJava的动态性让编程的时候更加灵活！")])]),s._v(" "),n("h3",{attrs:{id:"java反射机制研究及应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java反射机制研究及应用"}},[s._v("#")]),s._v(" Java反射机制研究及应用")]),s._v(" "),n("ul",[n("li",[s._v("Java反射机制提供的功能\n"),n("ul",[n("li",[s._v("在运行时判断任意一个对象所属的类")]),s._v(" "),n("li",[s._v("在运行时构造任意一个类的对象")]),s._v(" "),n("li",[s._v("在运行时判断任意一个类所具有的成员变量和方法")]),s._v(" "),n("li",[s._v("在运行时获取泛型信息")]),s._v(" "),n("li",[s._v("在运行时调用任意一个对象的成员变量和方法")]),s._v(" "),n("li",[s._v("在运行时处理注解")]),s._v(" "),n("li",[s._v("生成动态代理")])])]),s._v(" "),n("li",[s._v("反射相关的主要API\n"),n("ul",[n("li",[n("strong",[s._v("java.lang.Class")]),s._v(":代表一个类")]),s._v(" "),n("li",[n("strong",[s._v("java.lang.reflect.Method")]),s._v(":代表类的方法")]),s._v(" "),n("li",[n("strong",[s._v("java.lang.reflect.Field")]),s._v(":代表类的成员变量")]),s._v(" "),n("li",[n("strong",[s._v("java.lang.reflect.Constructor")]),s._v(":代表类的构造器")])])])]),s._v(" "),n("h2",{attrs:{id:"理解class类并获取class的实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解class类并获取class的实例"}},[s._v("#")]),s._v(" 理解Class类并获取Class的实例")]),s._v(" "),n("h3",{attrs:{id:"class类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class类"}},[s._v("#")]),s._v(" Class类")]),s._v(" "),n("p",[s._v("在Object类中定义了以下的方法，此方法\n将被所有子类继承：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("public final Class getClass")]),s._v("()"),n("br"),s._v("\n以上的方法返回值的类型是一个Class类，\n此类是Java反射的源头，实际上所谓反射\n从程序的运行结果来看也很好理解，即：\n可以通过对象反射求出类的名称。")]),s._v(" "),n("li",[s._v("对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接\n口。对于每个类而言， JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含\n了特定某个结构(class/interface/enum/annotation/primitive type/void/[])的有关信息。\n"),n("ul",[n("li",[s._v("Class本身也是一个类")]),s._v(" "),n("li",[s._v("Class 对象只能由系统建立对象")]),s._v(" "),n("li",[s._v("一个加载的类在 JVM 中只会有一个Class实例")]),s._v(" "),n("li",[s._v("一个Class对象对应的是一个加载到JVM中的一个.class文件")]),s._v(" "),n("li",[s._v("每个类的实例都会记得自己是由哪个 Class 实例所生成")]),s._v(" "),n("li",[s._v("通过Class可以完整地得到一个类中的所有被加载的结构")]),s._v(" "),n("li",[s._v("Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的\nClass对象")])])])]),s._v(" "),n("h3",{attrs:{id:"class类常用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class类常用方法"}},[s._v("#")]),s._v(" Class类常用方法")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("static Class forName")]),s._v("(String name)\n"),n("br"),s._v("返回指定类名 name 的 Class 对象")]),s._v(" "),n("li",[n("strong",[s._v("Object newInstance")]),s._v("()\n"),n("br"),s._v("调用缺省构造函数，返回该Class对象的一个实例")]),s._v(" "),n("li",[n("strong",[s._v("getName")]),s._v("()"),n("br"),s._v("返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称")]),s._v(" "),n("li",[n("strong",[s._v("Class getSuperClass")]),s._v("()"),n("br"),s._v("返回当前Class对象的父类的Class对象")]),s._v(" "),n("li",[n("strong",[s._v("Class [] getInterfaces")]),s._v("()"),n("br"),s._v("获取当前Class对象的接口")]),s._v(" "),n("li",[n("strong",[s._v("ClassLoader getClassLoader")]),s._v("()"),n("br"),s._v("返回该类的类加载器")]),s._v(" "),n("li",[n("strong",[s._v("Class getSuperclass")]),s._v("()"),n("br"),s._v("返回表示此Class所表示的实体的超类的Class")]),s._v(" "),n("li",[n("strong",[s._v("Constructor[] getConstructors")]),s._v("()"),n("br"),s._v("返回一个包含某些Constructor对象的数组")]),s._v(" "),n("li",[n("strong",[s._v("Field[] getDeclaredFields")]),s._v("()"),n("br"),s._v("返回Field对象的一个数组")]),s._v(" "),n("li",[n("strong",[s._v("Method getMethod")]),s._v("(String name,Class … paramTypes)"),n("br"),s._v("返回一个Method对象，此对象的形参类型为paramType")])]),s._v(" "),n("h3",{attrs:{id:"反射小例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射小例子"}},[s._v("#")]),s._v(" 反射小例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('String str = "reflect.myobj.Person";\nClass clazz = Class.forName(str);\nObject obj = clazz.newInstance();\nField field = clazz.getDeclaredField("name");\nfield.setAccessible(true);\nfield.set(obj, "David");\nObject name = field.get(obj);\nSystem.out.println(name);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("ul",[n("li",[s._v("要获取私有属性和私有方法，需要使用Class.getDeclaredFields()和Class.getDeclaredMethods()")]),s._v(" "),n("li",[s._v("要对私有属性赋值，需要先调用field.setAccessible(true); 关闭安全检查，才能赋值。")])])]),s._v(" "),n("h3",{attrs:{id:"获取class类的实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取class类的实例"}},[s._v("#")]),s._v(" 获取Class类的实例")]),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("前提： 若已知具体的类，通过类的class属性获取， 该方法最为安全可靠，\n程序性能最高"),n("br"),s._v("\n实例： Class clazz = String.class;")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("前提： 已知某个类的实例，调用该实例的getClass()方法获取Class对象\n实例： Class clazz = “www.atguigu.com”.getClass();")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[s._v("前提： 已知一个类的全类名，且该类在类路径下， 可通过Class类的静态方\n法forName()获取，可能抛出ClassNotFoundException"),n("br"),s._v("\n实例： Class clazz = Class.forName(“java.lang.String”);")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[s._v("其他方式(不做要求)"),n("br"),s._v("\nClassLoader cl = this.getClass().getClassLoader();\nClass clazz4 = cl.loadClass(“类的全类名”);")])])])]),s._v(" "),n("h3",{attrs:{id:"哪些类型可以有class对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#哪些类型可以有class对象"}},[s._v("#")]),s._v(" 哪些类型可以有Class对象？")]),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("class：\n外部类， 成员(成员内部类， 静态内部类)， 局部内部类， 匿名内部类")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("interface： 接口")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[s._v("[]：数组")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[s._v("enum：枚举")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[s._v("annotation：注解@interface")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"6"}},[n("li",[s._v("primitive type：基本数据类型")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"7"}},[n("li",[s._v("void")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Class c1 = Object.class;\nClass c2 = Comparable.class;\nClass c3 = String[].class;\nClass c4 = int[][].class;\nClass c5 = ElementType.class;\nClass c6 = Override.class;\nClass c7 = int.class;\nClass c8 = void.class;\nClass c9 = Class.class;\nint[] a = new int[10];\nint[] b = new int[100];\nClass c10 = a.getClass();\nClass c11 = b.getClass();\n// 只要元素类型与维度一样，就是同一个Class\nSystem.out.println(c10 == c11);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"类的加载与classloader的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的加载与classloader的理解"}},[s._v("#")]),s._v(" 类的加载与ClassLoader的理解")]),s._v(" "),n("h3",{attrs:{id:"了解-类的加载过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#了解-类的加载过程"}},[s._v("#")]),s._v(" 了解：类的加载过程")]),s._v(" "),n("p",[s._v("当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过\n如下三个步骤来对该类进行初始化。\n"),n("img",{attrs:{src:"/images/interview/iw-14.png",alt:""}}),n("br")]),s._v(" "),n("ul",[n("li",[s._v("加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时\n数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问\n入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的\n过程需要类加载器参与。")]),s._v(" "),n("li",[s._v("链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。\n"),n("ul",[n("li",[s._v("验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题")]),s._v(" "),n("li",[s._v("准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存\n都将在方法区中进行分配。")]),s._v(" "),n("li",[s._v("解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。")])])]),s._v(" "),n("li",[s._v("初始化：\n"),n("ul",[n("li",[s._v("执行类构造器<clinit>()方法的过程。 类构造器<clinit>()方法是由编译期自动收集类中\n所有类变量的赋值动作和静态代码块中的语句合并产生的。 （类构造器是构造类信\n息的，不是构造该类对象的构造器） 。")]),s._v(" "),n("li",[s._v("当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类\n的初始化。")]),s._v(" "),n("li",[s._v("虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class A {\n    static {m = 300;}\n    static int m = 100;\n}\n\nclass B {\n    static int m = 100;\n    static {m = 300;}\n}\n\npublic class ClassLoaderTest {\n    public static void main(String[] args) {\n        System.out.println(A.m);\n        System.out.println(B.m);\n    }\n}\n//第二步：链接结束后m=0\n//第三步：初始化后，m的值由<clinit>()方法执行决定\n// 这个A的类构造器<clinit>()方法由类变量的赋值和静态代码块中的语句按照顺序合并\n打印： 100\n       300\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h3",{attrs:{id:"什么时候会发生类初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么时候会发生类初始化"}},[s._v("#")]),s._v(" 什么时候会发生类初始化")]),s._v(" "),n("ul",[n("li",[s._v("类的主动引用（"),n("span",{staticStyle:{color:"red"}},[s._v("一定会发生类的初始化")]),s._v("）\n"),n("ul",[n("li",[s._v("当虚拟机启动， 先初始化main方法所在的类")]),s._v(" "),n("li",[s._v("new一个类的对象")]),s._v(" "),n("li",[s._v("调用类的静态成员（除了final常量） 和静态方法")]),s._v(" "),n("li",[s._v("使用java.lang.reflect包的方法对类进行反射调用")]),s._v(" "),n("li",[s._v("当初始化一个类， 如果其父类没有被初始化， 则先会初始化它的父类")])])]),s._v(" "),n("li",[s._v("类的被动引用（"),n("span",{staticStyle:{color:"red"}},[s._v("不会发生类的初始化")]),s._v("）\n"),n("ul",[n("li",[s._v("当访问一个静态域时， 只有真正声明这个域的类才会被初始化\n"),n("ul",[n("li",[s._v("当通过子类引用父类的静态变量， 不会导致子类初始化")])])]),s._v(" "),n("li",[s._v("通过数组定义类引用， 不会触发此类的初始化")]),s._v(" "),n("li",[s._v("引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常\n量池中了）")])])])]),s._v(" "),n("h3",{attrs:{id:"类加载的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载的作用"}},[s._v("#")]),s._v(" 类加载的作用")]),s._v(" "),n("p",[n("img",{attrs:{src:"/images/interview/iw-15.png",alt:""}}),n("br")]),s._v(" "),n("ul",[n("li",[s._v("类加载的作用： 将class文件字节码内容加载到内存中， 并将这些静态数据转换成方\n法区的运行时数据结构， 然后在堆中生成一个代表这个类的java.lang.Class对象， 作为\n方法区中类数据的访问入口。")]),s._v(" "),n("li",[s._v("类缓存： 标准的JavaSE类加载器可以按要求查找类， 但一旦某个类被加载到类加载器\n中， 它将维持加载（缓存） 一段时间。 不过JVM垃圾回收机制可以回收这些Class对象。")])]),s._v(" "),n("h3",{attrs:{id:"了解-classloader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#了解-classloader"}},[s._v("#")]),s._v(" 了解：ClassLoader")]),s._v(" "),n("p",[s._v("类加载器作用是用来把类(class)装载进内存的。 JVM 规范定义了如下类型的\n类的加载器。\n"),n("img",{attrs:{src:"/images/interview/iw-16.png",alt:""}}),n("br")]),s._v(" "),n("ul",[n("li",[s._v("1.获取一个系统类加载器"),n("br"),s._v("\nClassLoader classloader = ClassLoader.getSystemClassLoader();"),n("br"),s._v("\nSystem.out.println(classloader);"),n("br")]),s._v(" "),n("li",[s._v("2.获取系统类加载器的父类加载器，即扩展类加载器"),n("br"),s._v("\nclassloader = classloader.getParent();"),n("br"),s._v("\nSystem.out.println(classloader);"),n("br")]),s._v(" "),n("li",[s._v("3.获取扩展类加载器的父类加载器，即引导类加载器"),n("br"),s._v("\nclassloader = classloader.getParent();"),n("br"),s._v("\nSystem.out.println(classloader);"),n("br")]),s._v(" "),n("li",[s._v("4.测试当前类由哪个类加载器进行加载"),n("br"),s._v('\nclassloader = Class.forName("exer2.ClassloaderDemo").getClassLoader();'),n("br"),s._v("\nSystem.out.println(classloader);"),n("br")]),s._v(" "),n("li",[s._v("5.测试JDK提供的Object类由哪个类加载器加载"),n("br"),s._v('\nclassloader = Class.forName("java.lang.Object").getClassLoader();'),n("br"),s._v("\nSystem.out.println(classloader);"),n("br")]),s._v(" "),n("li",[s._v("6.关于类加载器的一个主要方法： "),n("br"),s._v("\ngetResourceAsStream(String str):获取类路径下的指定文件的输入流"),n("br"),s._v("\nInputStream in = null;"),n("br"),s._v('\nin = this.getClass().getClassLoader().getResourceAsStream("exer2\\test.properties");'),n("br"),s._v("\nSystem.out.println(in);"),n("br")])]),s._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),n("ul",[n("li",[s._v("如果Class是从Bootstrap ClassPath加载的，即；jdk \\ jre \\ lib \\ rt.jar，将调用BootStrap ClassLoader。")]),s._v(" "),n("li",[s._v("如果Class是从扩展Classpath加载的，即；jdk \\ jre \\ lib \\ ext * .jar，将调用Extension ClassLoader。")]),s._v(" "),n("li",[s._v("如果Class是从Application ClassPath中加载的，即；根据环境变量中的指定，将调用Application ClassLoader。")]),s._v(" "),n("li",[s._v("由于Bootstrap ClassLoader不是用Java实现的，因此它不是用c还是c ++来实现的，因此没有引用，这就是它返回null的原因。\n但是扩展和应用程序类Loader是用Java编写的，因此您将获得以下引用：\nsun.misc.Launcher$ExtClassLoader@someHexValue和\nsun.misc.Launcher$AppClassLoader@someHexValue。")])])]),s._v(" "),n("h2",{attrs:{id:"创建运行时类的对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建运行时类的对象"}},[s._v("#")]),s._v(" 创建运行时类的对象")]),s._v(" "),n("h3",{attrs:{id:"有了class对象后-能做什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有了class对象后-能做什么"}},[s._v("#")]),s._v(" 有了Class对象后，能做什么？")]),s._v(" "),n("p",[s._v("创建类的对象： 调用Class对象的newInstance()方法"),n("br"),s._v(" "),n("strong",[s._v("要求")]),s._v("：")]),s._v(" "),n("ul",[n("li",[s._v("类必须有一个无参数的构造器。")]),s._v(" "),n("li",[s._v("类的构造器的访问权限需要足够。"),n("br"),s._v("\n难道没有无参的构造器就不能创建对象了吗？\n不是！只要在操作的时候明确的调用类中的构造器， 并将参数传递进去之后，才可以实例化操作。"),n("br")])]),s._v(" "),n("p",[n("strong",[s._v("步骤如下")]),s._v("：")]),s._v(" "),n("ul",[n("li",[s._v("通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类\n型的构造器")]),s._v(" "),n("li",[s._v("向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。")]),s._v(" "),n("li",[s._v("通过Constructor实例化对象。")])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v("public T newInstance(Object ... initargs)")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public static Person getObj(String name,int age,boolean sex) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n    String className = "reflect.myobj.Person";\n    Class clazz = Class.forName(className);\n    Constructor con = clazz.getConstructor(String.class,Integer.class,Boolean.class);\n    Person person = (Person)con.newInstance(name,age,sex);\n    return person;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"获取运行时类的完整结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取运行时类的完整结构"}},[s._v("#")]),s._v(" 获取运行时类的完整结构")]),s._v(" "),n("h3",{attrs:{id:"通过反射获取运行时类的完整结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过反射获取运行时类的完整结构"}},[s._v("#")]),s._v(" 通过反射获取运行时类的完整结构")]),s._v(" "),n("ul",[n("li",[s._v("1.实现的全部接口\n"),n("ul",[n("li",[s._v("public Class<?>[] getInterfaces()"),n("br"),s._v("\n确定此对象所表示的类或接口实现的接口。")])])]),s._v(" "),n("li",[s._v("2.所继承的父类\n"),n("ul",[n("li",[s._v("public Class<? Super T> getSuperclass()"),n("br"),s._v("\n返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的Class。")])])]),s._v(" "),n("li",[s._v("3.全部的构造器\n"),n("ul",[n("li",[s._v("public Constructor<T>[] getConstructors()"),n("br"),s._v("\n返回此 Class 对象所表示的类的所有public构造方法。")]),s._v(" "),n("li",[s._v("public Constructor<T>[] getDeclaredConstructors()"),n("br"),s._v("\n返回此 Class 对象表示的类声明的所有构造方法。")]),s._v(" "),n("li",[s._v("Constructor类中：\n"),n("ul",[n("li",[s._v("取得修饰符: public int getModifiers();")]),s._v(" "),n("li",[s._v("取得方法名称: public String getName();")]),s._v(" "),n("li",[s._v("取得参数的类型： public Class<?>[] getParameterTypes();")])])])])]),s._v(" "),n("li",[s._v("4.全部的方法\n"),n("ul",[n("li",[s._v("public Method[] getDeclaredMethods()\n返回此Class对象所表示的类或接口的全部方法")]),s._v(" "),n("li",[s._v("public Method[] getMethods()\n返回此Class对象所表示的类或接口的public的方法")]),s._v(" "),n("li",[s._v("Method类中：\n"),n("ul",[n("li",[s._v("public Class<?> getReturnType()取得全部的返回值")]),s._v(" "),n("li",[s._v("public Class<?>[] getParameterTypes()取得全部的参数")]),s._v(" "),n("li",[s._v("public int getModifiers()取得修饰符")]),s._v(" "),n("li",[s._v("public Class<?>[] getExceptionTypes()取得异常信息")])])])])]),s._v(" "),n("li",[s._v("5.全部的Field\n"),n("ul",[n("li",[s._v("public Field[] getFields()\n返回此Class对象所表示的类或接口的public的Field。")]),s._v(" "),n("li",[s._v("public Field[] getDeclaredFields()\n返回此Class对象所表示的类或接口的全部Field。")]),s._v(" "),n("li",[s._v("Field方法中：\n"),n("ul",[n("li",[s._v("public int getModifiers() 以整数形式返回此Field的修饰符")]),s._v(" "),n("li",[s._v("public Class<?> getType() 得到Field的属性类型")]),s._v(" "),n("li",[s._v("public String getName() 返回Field的名称。")])])])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"6"}},[n("li",[s._v("Annotation相关")])]),s._v(" "),n("ul",[n("li",[s._v("get Annotation(Class<T> annotationClass)")]),s._v(" "),n("li",[s._v("getDeclaredAnnotations()")])])]),s._v(" "),n("li",[s._v("7.泛型相关\n"),n("ul",[n("li",[s._v("获取父类泛型类型： Type getGenericSuperclass()")]),s._v(" "),n("li",[s._v("泛型类型： ParameterizedType")]),s._v(" "),n("li",[s._v("获取实际的泛型类型参数数组： getActualTypeArguments()")])])]),s._v(" "),n("li",[s._v("8.类所在的包\n"),n("ul",[n("li",[s._v("Package getPackage()")])])])]),s._v(" "),n("h2",{attrs:{id:"调用运行时类的指定结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用运行时类的指定结构"}},[s._v("#")]),s._v(" 调用运行时类的指定结构")]),s._v(" "),n("h3",{attrs:{id:"调用指定方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用指定方法"}},[s._v("#")]),s._v(" 调用指定方法")]),s._v(" "),n("p",[s._v("通过反射，调用类中的方法，通过Method类完成。步骤：")]),s._v(" "),n("ul",[n("li",[s._v("1.通过Class类的getMethod(String name,Class…parameterTypes)方法取得\n一个Method对象，并设置此方法操作时所需要的参数类型。")]),s._v(" "),n("li",[s._v("2.之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中\n传递要设置的obj对象的参数信息。\n"),n("img",{attrs:{src:"/images/interview/iw-17.png",alt:""}}),n("br")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object invoke(Object obj, Object … args)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("说明："),n("br")]),s._v(" "),n("ul",[n("li",[s._v("1.Object 对应原方法的返回值，若原方法无返回值，此时返回null")]),s._v(" "),n("li",[s._v("2.若原方法若为静态方法，此时形参Object obj可为null")]),s._v(" "),n("li",[s._v("3.若原方法形参列表为空，则Object[] args为null")]),s._v(" "),n("li",[s._v("4.若原方法声明为private,则需要在调用此invoke()方法前，显式调用\n方法对象的setAccessible(true)方法，将可访问private的方法。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public static boolean getMethod(int age,boolean sex) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {\n    String className = "reflect.myobj.Person";\n    Class clazz = Class.forName(className);\n    Method method = clazz.getDeclaredMethod("methodFour", Integer.class, Boolean.class);\n    Person person = (Person) clazz.newInstance();\n    method.setAccessible(true);\n    boolean flag = (Boolean) method.invoke(person,age,sex);\n    System.out.println(person);\n    return flag;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"调用指定属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用指定属性"}},[s._v("#")]),s._v(" 调用指定属性")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和\nget()方法就可以完成设置和取得属性内容的操作。")]),s._v(" "),n("ul",[n("li",[s._v("public Field getField(String name) 返回此Class对象表示的类或接口的指定的\npublic的Field。")]),s._v(" "),n("li",[s._v("public Field getDeclaredField(String name)返回此Class对象表示的类或接口的\n指定的Field。")])])]),s._v(" "),n("li",[n("p",[s._v("在Field中：")]),s._v(" "),n("ul",[n("li",[s._v("public Object get(Object obj) 取得指定对象obj上此Field的属性内容")]),s._v(" "),n("li",[s._v("public void set(Object obj,Object value) 设置指定对象obj上此Field的属性内容")])])])]),s._v(" "),n("h3",{attrs:{id:"关于setaccessible方法的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于setaccessible方法的使用"}},[s._v("#")]),s._v(" 关于setAccessible方法的使用")]),s._v(" "),n("ul",[n("li",[s._v("Method和Field、 Constructor对象都有setAccessible()方法。")]),s._v(" "),n("li",[s._v("setAccessible启动和禁用访问安全检查的开关。")]),s._v(" "),n("li",[s._v("参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。\n"),n("ul",[n("li",[s._v("提高反射的效率。 如果代码中必须用反射， 而该句代码需要频繁的被\n调用， 那么请设置为true。")]),s._v(" "),n("li",[s._v("使得原本无法访问的私有成员也可以访问")])])]),s._v(" "),n("li",[s._v("参数值为false则指示反射的对象应该实施Java语言访问检查。")])]),s._v(" "),n("h2",{attrs:{id:"反射的应用-动态代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射的应用-动态代理"}},[s._v("#")]),s._v(" 反射的应用：动态代理")]),s._v(" "),n("ul",[n("li",[s._v("代理设计模式的原理:"),n("br"),s._v("\n使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原\n始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原\n始对象上。")]),s._v(" "),n("li",[s._v("之前为大家讲解过代理机制的操作，属于静态代理，特征是代理类和目标\n对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代\n理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。 最\n好可以通过一个代理类完成全部的代理功能。")]),s._v(" "),n("li",[s._v("动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时\n根据需要动态创建目标类的代理对象。")]),s._v(" "),n("li",[s._v("动态代理使用场合:\n"),n("ul",[n("li",[s._v("调试")]),s._v(" "),n("li",[s._v("远程方法调用")])])]),s._v(" "),n("li",[s._v("动态代理相比于静态代理的优点：\n抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中\n处理，这样，我们可以更加灵活和统一的处理众多的方法。")])]),s._v(" "),n("h3",{attrs:{id:"java动态代理相关api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java动态代理相关api"}},[s._v("#")]),s._v(" Java动态代理相关API")]),s._v(" "),n("ul",[n("li",[s._v("Proxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一\n个或多个接口动态地生成实现类。")]),s._v(" "),n("li",[s._v("提供用于创建动态代理类和动态代理对象的静态方法\n"),n("ul",[n("li",[s._v("static Class<?> getProxyClass(ClassLoader loader, Class<?>... interfaces) 创建\n一个动态代理类所对应的Class对象")]),s._v(" "),n("li",[s._v("static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,\nInvocationHandler h) 直接创建一个动态代理对象\n"),n("ul",[n("li",[s._v("loader : 类加载器")]),s._v(" "),n("li",[s._v("interfaces : 得到被代理类实现的全部接口")]),s._v(" "),n("li",[s._v("h : 得到InvocationHandler接口的实现类实例")])])])])])]),s._v(" "),n("h3",{attrs:{id:"动态代理步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态代理步骤"}},[s._v("#")]),s._v(" 动态代理步骤")]),s._v(" "),n("ul",[n("li",[s._v("1.创建一个实现接口InvocationHandler的类，它必须实现invoke方\n法，以完成代理的具体操作。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public Object invoke(Object theProxy, Method method, Object[] params)\nthrows Throwable{\n    try{\n        Object retval = method.invoke(targetObj, params);\n        // Print out the result\n        System.out.println(retval);\n        return retval;\n    }catch (Exception exc){}\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("2.创建被代理的类以及接口\n"),n("img",{attrs:{src:"/images/interview/iw-18.png",alt:""}}),n("br")]),s._v(" "),n("li",[s._v("3.通过Proxy的静态方法\nnewProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建\n一个Subject接口代理")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("RealSubject target = new RealSubject();\n// Create a proxy to wrap the original implementation\nDebugProxy proxy = new DebugProxy(target);\n// Get a reference to the proxy through the Subject interface\nSubject sub = (Subject) Proxy.newProxyInstance(\nSubject.class.getClassLoader(),new Class[] { Subject.class }, proxy);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("4.通过 Subject代理调用RealSubject实现类的方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('String info = sub.say(“Peter", 24);\nSystem.out.println(info);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("静态代理和动态代理例子")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public interface CallService {\n\n    public String call(String msg);\n\n}\n\npublic class AppleCall implements CallService {\n    @Override\n    public String call(String msg) {\n        return "apple call => "+msg;\n    }\n}\n\npublic class ProxyCall implements CallService {\n\n    private CallService callService;\n\n    public ProxyCall(CallService callService) {\n        this.callService = callService;\n    }\n\n    @Override\n    public String call(String msg) {\n        System.out.println("静态代理前...");\n        msg = msg +"[StaticProxy]";\n        String result = callService.call(msg);\n        System.out.println("静态代理后...");\n        return result;\n    }\n    \n}\n\npublic class ProxyTest {\n\n    public static CallService createStaticProxy(CallService callService) {\n        CallService proxyCall = new ProxyCall(callService);\n        return proxyCall;\n    }\n\n    private static CallService createDynamicProxy(CallService callService) {\n        CallService service = (CallService) Proxy.newProxyInstance(CallService.class.getClassLoader(),\n                new Class[]{CallService.class},\n                (Object proxy, Method method, Object[] args) -> {\n                    System.out.println("动态代理前...");\n                    String param = (String) args[0] + "[DynamicProxy]";\n                    args[0] = param;\n                    Object result = method.invoke(callService, args);\n                    System.out.println("动态代理后...");\n                    return result;\n                }\n        );\n        return service;\n    }\n\n    public static void main(String[] args) {\n        CallService appleCall = new AppleCall();\n        CallService proxy_1 = createStaticProxy(appleCall);\n        CallService proxy_2 = createDynamicProxy(appleCall);\n        System.out.println(proxy_1.call("Jack"));\n        System.out.println(proxy_2.call("Rose"));\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br")])]),n("h3",{attrs:{id:"动态代理与aop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态代理与aop"}},[s._v("#")]),s._v(" 动态代理与AOP")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("前面介绍的Proxy和InvocationHandler，很难看出这种动态代理的优势，下\n面介绍一种更实用的动态代理机制\n"),n("img",{attrs:{src:"/images/interview/iw-19.png",alt:""}}),n("br"),s._v(" "),n("img",{attrs:{src:"/images/interview/iw-20.png",alt:""}}),n("br"),s._v("\n改进后的说明：代码段1、代码段2、代码段3和深色代码段分离开了，但代码段1、 2、 3又和\n一个特定的方法A耦合了！最理想的效果是：代码块1、 2、 3既可以执行方法A，又无须在程序\n中以硬编码的方式直接调用深色代码的方法")])]),s._v(" "),n("li",[n("p",[s._v("使用Proxy生成一个动态代理时，往往并不会凭空产生一个动态代理，这样没有\n太大的意义。通常都是为指定的目标对象生成动态代理")])]),s._v(" "),n("li",[n("p",[s._v("这种动态代理在AOP中被称为AOP代理， AOP代理可代替目标对象， AOP代理\n包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：\nAOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理\n"),n("img",{attrs:{src:"/images/interview/iw-21.png",alt:""}}),n("br")])]),s._v(" "),n("li",[n("p",[s._v("模拟aop代理案例")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public interface CommonCall extends CallService {\n\n    public String msg(String msg);\n\n}\n\npublic class HuaweiCall implements CommonCall {\n\n    @Override\n    public String msg(String msg) {\n        return "Huawei msg => "+msg;\n    }\n\n    @Override\n    public String call(String msg) {\n        return "Huawei call => "+msg;\n    }\n}\n\npublic class AopUtil {\n\n    public void beforeRealMethod(){\n        System.out.println("在被代理方法执行前处理...");\n    }\n\n    public void afterRealMethod(){\n        System.out.println("在被代理方法执行后处理...");\n    }\n}\n\npublic class MyInvocationHandler implements InvocationHandler {\n\n    private Object target;\n\n    public void setTarget(Object target){\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        AopUtil aop = new AopUtil();\n        aop.beforeRealMethod();\n        args[0] = args[0]+"[AOP]";\n        Object obj = method.invoke(target,args);\n        aop.afterRealMethod();\n        return obj;\n    }\n}\n\npublic class MyProxyFactory {\n\n    public static Object createProxy(Object target){\n        MyInvocationHandler handler = new MyInvocationHandler();\n        handler.setTarget(target);\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),handler);\n    }\n\n    public static void main(String[] args) {\n        CommonCall call = new HuaweiCall();\n        CommonCall proxy = (CommonCall) createProxy(call);\n        System.out.println(proxy.call("Jack"));\n        System.out.println(proxy.msg("Rose"));\n\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br")])])])}),[],!1,null,null,null);a.default=l.exports}}]);