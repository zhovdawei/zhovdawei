(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{392:function(r,e,s){"use strict";s.r(e);var n=s(42),a=Object(n.a)({},(function(){var r=this,e=r.$createElement,s=r._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[s("h1",{attrs:{id:"docker介绍与安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker介绍与安装"}},[r._v("#")]),r._v(" Docker介绍与安装")]),r._v(" "),s("hr"),r._v(" "),s("h2",{attrs:{id:"docker是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker是什么"}},[r._v("#")]),r._v(" Docker是什么")]),r._v(" "),s("p",[r._v("Docker是一个开源的应用容器引擎，使用Go语言开发，基于Linux内核的cgroup， namespace， Union FS等技术，对应用进程进行封装隔离，并且\n独立于宿主机与其他进程，这种运行时封装的状态称为容器。"),s("br"),r._v("\nDocker早起版本实现是基于LXC，并进一步对其封装，包括文件系统、网络互联、镜像管理等方面，极大简化了容器管理。从0.7版本以后开始去\n除LXC，转为自行研发的libcontainer，从1.11版本开始，进一步演进为使用runC和containerd。"),s("br"),r._v("\nDocker理念是将应用及依赖包打包到一个可移植的容器中，可发布到任意Linux发行版Docker引擎上。使用沙箱机制运行程序，程序之间相互隔离。")]),r._v(" "),s("h2",{attrs:{id:"docker体系结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker体系结构"}},[r._v("#")]),r._v(" Docker体系结构")]),r._v(" "),s("p",[s("img",{attrs:{src:"/images/docker/docker01.png",alt:""}})]),r._v(" "),s("p",[s("strong",[r._v("Containerd")]),r._v("是一个简单的守护进程， 使用runC管理容器。 向Docker Engine提供接口。"),s("br"),r._v(" "),s("strong",[r._v("Shim")]),r._v("只负责管理一个容器。"),s("br"),r._v(" "),s("strong",[r._v("runC")]),r._v("是一个轻量级的工具， 只用来运行容器。"),s("br"),r._v(" "),s("img",{attrs:{src:"/images/docker/docker02.png",alt:""}})]),r._v(" "),s("h2",{attrs:{id:"内部组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部组件"}},[r._v("#")]),r._v(" 内部组件")]),r._v(" "),s("p",[s("strong",[r._v("Namespaces")]),s("br"),r._v("\n命名空间，Linux内核提供的一种对进程资源隔离的机制，例如进程、网络、挂载点等资源\n"),s("br"),s("strong",[r._v("CGroups")]),s("br"),r._v("\n控制组，Linux内核提供的一种限制进程资源的机制；例如CPU、内存等资源\n"),s("br"),s("strong",[r._v("UnionFS")]),s("br"),r._v("\n联合文件系统，支持将不同的目录挂载到同一虚拟文件系统，形成一种分层的模型")]),r._v(" "),s("h2",{attrs:{id:"虚拟机与容器区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机与容器区别"}},[r._v("#")]),r._v(" 虚拟机与容器区别")]),r._v(" "),s("p",[s("img",{attrs:{src:"/images/docker/docker03.png",alt:""}})]),r._v(" "),s("p",[r._v("以KVM举例，与Docker对比\n"),s("br"),s("strong",[r._v("启动时间")]),s("br"),r._v("\nDocker秒级启动， KVM分钟级启动。\n"),s("br"),s("strong",[r._v("轻量级")]),s("br"),r._v("\n容器镜像大小通常以M为单位，虚拟机以G为单位。\n容器资源占用小，要比虚拟机部署更快速。\n"),s("br"),s("strong",[r._v("性能")]),s("br"),r._v("\n容器共享宿主机内核，系统级虚拟化，占用资源少，没有Hypervisor层开销，容器性能基本接近物理机；\n虚拟机需要Hypervisor层支持，虚拟化一些设备，具有完整的GuestOS，虚拟化开销大，因而降低性能，没有容器性能好。\n"),s("br"),s("strong",[r._v("安全性")]),s("br"),r._v("\n由于共享宿主机内核，只是进程级隔离，因此隔离性和稳定性不如虚拟机，容器具有一定权限访问宿主机内核，存在一定安全隐患。\n"),s("br"),s("strong",[r._v("使用要求")]),s("br"),r._v("\nKVM基于硬件的完全虚拟化，需要硬件CPU虚拟化技术支持；\n容器共享宿主机内核，可运行在主流的Linux发行版，不用考虑CPU是否支持虚拟化技术。")]),r._v(" "),s("h2",{attrs:{id:"docker应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker应用场景"}},[r._v("#")]),r._v(" Docker应用场景")]),r._v(" "),s("p",[s("strong",[r._v("场景一")]),r._v("： 节省项目环境部署时间"),s("br")]),r._v(" "),s("ol",[s("li",[r._v("单项目打包"),s("br")]),r._v(" "),s("li",[r._v("整套项目打包"),s("br")]),r._v(" "),s("li",[r._v("新开源技术试用"),s("br")])]),r._v(" "),s("p",[s("strong",[r._v("场景二")]),r._v("： 环境一致性"),s("br"),r._v(" "),s("strong",[r._v("场景三")]),r._v("： 持续集成"),s("br"),r._v(" "),s("strong",[r._v("场景四")]),r._v("： 微服务"),s("br"),r._v(" "),s("strong",[r._v("场景五")]),r._v("： 弹性伸缩"),s("br")]),r._v(" "),s("h2",{attrs:{id:"linux安装docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux安装docker"}},[r._v("#")]),r._v(" Linux安装Docker")]),r._v(" "),s("p",[r._v("我个人的docker学习环境是在Linux-Centos7.x上。学习的docker版本是社区版本。")]),r._v(" "),s("p",[s("br"),s("strong",[r._v("卸载旧版本")]),s("br"),r._v("\n同时也可以检测是否安装过旧版本，卸载干净后，保持一个初始环境。")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br"),s("span",{staticClass:"line-number"},[r._v("2")]),s("br"),s("span",{staticClass:"line-number"},[r._v("3")]),s("br"),s("span",{staticClass:"line-number"},[r._v("4")]),s("br"),s("span",{staticClass:"line-number"},[r._v("5")]),s("br"),s("span",{staticClass:"line-number"},[r._v("6")]),s("br"),s("span",{staticClass:"line-number"},[r._v("7")]),s("br"),s("span",{staticClass:"line-number"},[r._v("8")]),s("br")])]),s("p",[r._v("如果yum报告没有安装这些软件包，则可以。\n/var/lib/docker/保留包括图像，容器，卷和网络在内的内容。"),s("br")]),r._v(" "),s("p",[s("br"),s("strong",[r._v("使用存储库安装")]),s("br"),r._v("\n在新主机上首次安装Docker Engine - Community之前，需要设置Docker存储库。"),s("br"),r._v("\n设置存储库"),s("br"),r._v("\n安装所需的包。yum-utils提供了yum-config-manager 效用，并device-mapper-persistent-data和lvm2由需要 devicemapper存储驱动程序。")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br"),s("span",{staticClass:"line-number"},[r._v("2")]),s("br"),s("span",{staticClass:"line-number"},[r._v("3")]),s("br")])]),s("p",[r._v("使用以下命令设置稳定存储库。")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br"),s("span",{staticClass:"line-number"},[r._v("2")]),s("br"),s("span",{staticClass:"line-number"},[r._v("3")]),s("br")])]),s("p",[s("br"),s("strong",[r._v("更新yum包索引")]),s("br")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo yum makecache fast\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("p",[s("br"),s("strong",[r._v("安装Docker Engine-社区版")]),s("br")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo yum install docker-ce\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("p",[s("br"),s("strong",[r._v("启动docker")]),s("br")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo systemctl start docker\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("p",[s("br"),s("strong",[r._v("重新启动docker")]),s("br")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo systemctl restart docker\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("p",[s("br"),s("strong",[r._v("卸载docker")]),s("br"),r._v("\n卸载Docker包："),s("br")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo yum remove docker-ce\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("p",[r._v("主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷："),s("br")]),r._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[r._v("$ sudo rm -rf /var/lib/docker\n")])]),r._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[r._v("1")]),s("br")])]),s("p",[r._v("您必须手动删除任何已编辑的配置文件。"),s("br")]),r._v(" "),s("hr"),r._v(" "),s("p",[s("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/centos/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Docker官方文档"),s("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);