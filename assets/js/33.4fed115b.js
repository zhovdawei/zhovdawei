(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{388:function(a,s,r){"use strict";r.r(s);var n=r(42),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,r=a._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"jenkins-docker自动化ci-cd流水线实战"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-docker自动化ci-cd流水线实战"}},[a._v("#")]),a._v(" Jenkins+Docker自动化CI&CD流水线实战")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"目标流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#目标流程"}},[a._v("#")]),a._v(" 目标流程")]),a._v(" "),r("p",[r("img",{attrs:{src:"/images/cicd/cicd-4.png",alt:""}}),r("br"),a._v("\n一共计划4个步骤："),r("br"),a._v("\n拉代码->编译打包->制作镜像&推送->部署容器")]),a._v(" "),r("h2",{attrs:{id:"节点准备"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#节点准备"}},[a._v("#")]),a._v(" 节点准备")]),a._v(" "),r("h3",{attrs:{id:"git服务器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git服务器"}},[a._v("#")]),a._v(" Git服务器")]),a._v(" "),r("p",[a._v("IP地址 : 192.168.163.105"),r("br"),a._v("\n安装Git,做为代码统一管理仓库"),r("br")]),a._v(" "),r("h3",{attrs:{id:"jenkins服务器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jenkins服务器"}},[a._v("#")]),a._v(" Jenkins服务器")]),a._v(" "),r("p",[a._v("IP地址 : 192.168.163.101"),r("br"),a._v("\n1.安装JDK(容器化构建，JDK至少1.8)"),r("br"),a._v("\n2.安装Jenkins"),r("br"),a._v("\n3.安装Git,用于从Git仓库拉取代码"),r("br"),a._v("\n4.安装maven,用于构建打包代码"),r("br"),a._v("\n5.安装Docker,用于构建镜像和推送镜像到镜像仓库"),r("br")]),a._v(" "),r("p",[r("strong",[a._v("注意：")]),r("br"),a._v("\n如果你的Harbor镜像仓库是https访问，需要在Jenkins服务器装认证。"),r("br"),a._v(" "),r("a",{attrs:{href:"/coding/devops/docker/%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93Harbor"}},[a._v("Harbor镜像仓库")])]),a._v(" "),r("h3",{attrs:{id:"harbor服务器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#harbor服务器"}},[a._v("#")]),a._v(" Harbor服务器")]),a._v(" "),r("p",[a._v("IP地址 : 192.168.163.107"),r("br"),a._v("\n1.安装Docker"),r("br"),a._v("\n2.安装Harbor以docker-compose的方式部署"),r("br")]),a._v(" "),r("h3",{attrs:{id:"测试服务器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#测试服务器"}},[a._v("#")]),a._v(" 测试服务器")]),a._v(" "),r("p",[a._v("IP地址 : 192.168.163.106"),r("br"),a._v("\n安装Docker,用于运行项目镜像的容器"),r("br")]),a._v(" "),r("h3",{attrs:{id:"mysql服务器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql服务器"}},[a._v("#")]),a._v(" Mysql服务器")]),a._v(" "),r("p",[a._v("IP地址 : 192.168.163.111"),r("br"),a._v("\n安装Mysql,用于项目的数据存储/读取")]),a._v(" "),r("h2",{attrs:{id:"jenkins流水线脚本"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jenkins流水线脚本"}},[a._v("#")]),a._v(" Jenkins流水线脚本")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("node{\n    stage('步骤命名'){\n        //脚本\n    }\n}\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br")])]),r("p",[a._v("脚本的整体结构如上，我们需要对每一步的执行，编写适当的脚本。"),r("br"),a._v("\n这里我建议，每完成一个stage,就放到jenkins上测试一番。以保证该步骤的正确执行。")]),a._v(" "),r("h3",{attrs:{id:"从git拉取代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#从git拉取代码"}},[a._v("#")]),a._v(" 从Git拉取代码")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("stage('拉代码') { \n   checkout([$class: 'GitSCM', branches: [[name: '${branch}']], doGenerateSubmoduleConfigurations: false,\n    extensions: [], submoduleCfg: [], userRemoteConfigs: \n    [[url: 'git@192.168.163.105:/home/git/repos/web.git']]])\n}\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br")])]),r("p",[a._v("前面Pipeline学习的一章，也提到过如何用流水线语法，便捷的生成我们需要的脚本模板，可以翻回查看。\n这里我们只需要确认项目的Git地址，和分支即可。如果是构建分支参数，请写分支的变量。")]),a._v(" "),r("h3",{attrs:{id:"使用maven编译打包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用maven编译打包"}},[a._v("#")]),a._v(" 使用Maven编译打包")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("stage('打包') {\n   sh '''\n    export JAVA_HOME=/usr/local/java/jdk1.8.0_231\n    cd java-web-1/\n    /usr/local/maven/apache-maven-3.5.0/bin/mvn clean package -Dmaven.test.skip=true\n    '''\n}\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br")])]),r("p",[a._v("需要注意的是，我这里项目结构是父子项目，子项目引用了父项目的配置。\n而我的jenkins进入当前任务的目录为："),r("br"),a._v("\n/var/lib/jenkins/workspace/web-1/"),r("br"),a._v("\nweb-1是jenkins的任务名称，也是这个项目的父目录。\n而我的子项目是java-web-1。所以在打包的命令上加了一句 cd java-web-1/ 以\n便针对子项目打包。如果你不是这种结构，就不用理会。")]),a._v(" "),r("h3",{attrs:{id:"构建镜像并推送到仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像并推送到仓库"}},[a._v("#")]),a._v(" 构建镜像并推送到仓库")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("stage('镜像') {\n    sh '''\n        cd java-web-1/\n        REPOSITORY=depo.zhoudawei.com/mytest/java-web-1:${branch}\n        cat > Dockerfile << EOF\n        FROM depo.zhoudawei.com/library/tomcat:v1 \n        MAINTAINER zdw0607@gmail.com\n        RUN rm -rf /usr/local/apache-tomcat-8.0.46/webapps/*\n        ADD target/*.war /usr/local/apache-tomcat-8.0.46/webapps/ROOT.war\nEOF\n        docker build -t $REPOSITORY .\n        docker login -udavid -pHarbor2019 depo.zhoudawei.com\n        docker push $REPOSITORY\n    ''' \n}\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br"),r("span",{staticClass:"line-number"},[a._v("8")]),r("br"),r("span",{staticClass:"line-number"},[a._v("9")]),r("br"),r("span",{staticClass:"line-number"},[a._v("10")]),r("br"),r("span",{staticClass:"line-number"},[a._v("11")]),r("br"),r("span",{staticClass:"line-number"},[a._v("12")]),r("br"),r("span",{staticClass:"line-number"},[a._v("13")]),r("br"),r("span",{staticClass:"line-number"},[a._v("14")]),r("br"),r("span",{staticClass:"line-number"},[a._v("15")]),r("br")])]),r("p",[a._v("这里主要分布两步："),r("br"),a._v(" "),r("strong",[a._v("第一步")]),a._v("：制作镜像docker build -t $REPOSITORY ."),r("br"),a._v("\n之前的章节我们介绍过镜像的三层结构，这里我们创建的是项目镜像，项目镜像就是包含了\n运行环境和代码的镜像，直接跑起来就能访问到我们开发的程序。这里引用的tomcat镜像，\n是运行环境镜像。Docker系列里面有完成的tomcat镜像制作和推送Harbor。"),r("br"),a._v(" "),r("strong",[a._v("第二步")]),a._v("：推送镜像docker push $REPOSITORY"),r("br"),a._v("\n首先你需要登录到Harbor服务器，然后就可以往上面推送了。"),r("br"),a._v(" "),r("strong",[a._v("注意")]),a._v("：这里需要注意一点EOF需要单独占一行，而且不能有空格。格式有些怪异，\n主要是为了满足EOF格式需要。另外注意一下你tomcat镜像中，tomcat的安装目录。如果你安装完是默认目录，\n可能就像我这样带有版本号的。那么你在编写dockerfile的时候，就要留意这个细节。")]),a._v(" "),r("h3",{attrs:{id:"部署到测试服务器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#部署到测试服务器"}},[a._v("#")]),a._v(" 部署到测试服务器")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("stage('部署') {\n    sh '''\n        REPOSITORY=depo.zhoudawei.com/mytest/java-web-1:${branch}\n        ssh root@192.168.163.106 \"/usr/bin/docker rm -f java-web-1 |true\"\n        ssh root@192.168.163.106 \"/usr/bin/docker pull $REPOSITORY\"\n        ssh root@192.168.163.106 \"/usr/bin/docker container run -d --name java-web-1 -p 8090:8080 $REPOSITORY\"\n    '''\n}\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br"),r("span",{staticClass:"line-number"},[a._v("8")]),r("br")])]),r("p",[a._v("我这里是设计192.168.163.106用来运行的容器的。在Jenkins服务器上，通过ssh访问远程服务器，执行该服务器上的命令，来完成部署工作。")]),a._v(" "),r("h2",{attrs:{id:"综合测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#综合测试"}},[a._v("#")]),a._v(" 综合测试")]),a._v(" "),r("h3",{attrs:{id:"更新代码并提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更新代码并提交"}},[a._v("#")]),a._v(" 更新代码并提交")]),a._v(" "),r("p",[r("img",{attrs:{src:"/images/cicd/jd-1.gif",alt:""}}),r("br"),a._v("\n如上演示，我们在html修改了一句文案。然后提交，推送到Git仓库中。")]),a._v(" "),r("h3",{attrs:{id:"jenkins构建一条龙"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jenkins构建一条龙"}},[a._v("#")]),a._v(" Jenkins构建一条龙")]),a._v(" "),r("p",[r("img",{attrs:{src:"/images/cicd/jd-2.gif",alt:""}}),r("br"),a._v("\n如上演示，拉取代码是最新提交的版本，commit的留言“盘她”就是最近提交的。然后是maven编译打包，也是正确的打出\n了war包。然后是制作镜像，这里再101上制作了镜像，然后成功地把镜像推送到了镜像仓库Harbor中。最后就是在\n106上拉取镜像并部署。这其中任何一步出现问题，就会停止，我们可以在该步骤中查看log，以便修改脚本。")]),a._v(" "),r("h3",{attrs:{id:"测试接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#测试接口"}},[a._v("#")]),a._v(" 测试接口")]),a._v(" "),r("p",[r("img",{attrs:{src:"/images/cicd/jd-3.gif",alt:""}}),r("br"),a._v("\n106是docker容器运行主机，我们在这里部署项目。可以看到我们访问的是8090，这是在部署哪一步的脚本就确定了。\n容器内tomcat默认运行的是8080端口，我们通过docker监听容器内端口8080，然后通过8090把项目暴露出去。\n这样我们就以通过8090访问到我们的应用了。上面演示测试数据读写，也是正常。这说明在106上访问111mysql主机也是\n正常的。")]),a._v(" "),r("h2",{attrs:{id:"后话"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#后话"}},[a._v("#")]),a._v(" 后话")]),a._v(" "),r("p",[a._v("本来我是要再拉取代码步骤前，加一个sonar代码静态检查的。但是我这边下载sonar相关资源受阻，等我科学上网搞一波资源了。\n再把这一步补上去一起测试。然后后面是整合Jenkins+k8s做一个CI&CD,其实也就不难了。就是修改我们今天的部署那一个\n步骤。制作deployment-file，service-file和ingress暴露服务就行了。")])])}),[],!1,null,null,null);s.default=e.exports}}]);