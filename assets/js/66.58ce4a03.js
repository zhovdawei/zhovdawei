(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{419:function(t,e,s){"use strict";s.r(e);var n=s(42),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java网络开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java网络开发"}},[t._v("#")]),t._v(" Java网络开发")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("抄自-> 尚硅谷2019Java核心知识点")]),t._v(" "),s("h2",{attrs:{id:"网络编程概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络编程概述"}},[t._v("#")]),t._v(" 网络编程概述")]),t._v(" "),s("ul",[s("li",[t._v("Java是 Internet 上的语言，它从语言级上提供了对网络应用程\n序的支持，程序员能够很容易开发常见的网络应用程序。")]),t._v(" "),s("li",[t._v("Java提供的网络类库，可以实现无痛的网络连接，联网的底层\n细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并\n且 Java 实现了一个跨平台的网络库， 程序员面对的是一个统一\n的网络编程环境。")])]),t._v(" "),s("h3",{attrs:{id:"网络基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络基础"}},[t._v("#")]),t._v(" 网络基础")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("计算机网络")]),t._v("："),s("br"),t._v("\n把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规\n模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、\n共享硬件、软件、数据信息等资源。")]),t._v(" "),s("li",[s("strong",[t._v("网络编程的目的")]),t._v("："),s("br"),t._v("\n直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。")]),t._v(" "),s("li",[s("strong",[t._v("网络编程中有两个主要的问题")]),t._v("："),s("br"),t._v(" "),s("ul",[s("li",[t._v("如何准确地定位网络上一台或多台主机；定位主机上的特定的应用")]),t._v(" "),s("li",[t._v("找到主机后如何可靠高效地进行数据传输")])])])]),t._v(" "),s("h2",{attrs:{id:"网络通信要素概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络通信要素概述"}},[t._v("#")]),t._v(" 网络通信要素概述")]),t._v(" "),s("ul",[s("li",[t._v("IP和端口号")]),t._v(" "),s("li",[t._v("网络通信协议")])]),t._v(" "),s("h3",{attrs:{id:"如何实现网络中的主机互相通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现网络中的主机互相通信"}},[t._v("#")]),t._v(" 如何实现网络中的主机互相通信")]),t._v(" "),s("ul",[s("li",[t._v("通信双方地址\n"),s("ul",[s("li",[t._v("ip")]),t._v(" "),s("li",[t._v("port")])])]),t._v(" "),s("li",[t._v("一定的规则（即：网络通信协议。有两套参考模型）\n"),s("ul",[s("li",[t._v("OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广")]),t._v(" "),s("li",[t._v("TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。")])])])]),t._v(" "),s("h3",{attrs:{id:"网络协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络协议"}},[t._v("#")]),t._v(" 网络协议")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/interview/iw-7.png",alt:""}}),s("br"),t._v(" "),s("img",{attrs:{src:"/images/interview/iw-8.png",alt:""}}),s("br")]),t._v(" "),s("h2",{attrs:{id:"通信要素一-ip和port"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通信要素一-ip和port"}},[t._v("#")]),t._v(" 通信要素一:ip和port")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ip地址")]),t._v("：InetAddress\n"),s("ul",[s("li",[t._v("唯一的标识 Internet 上的计算机（通信实体）")]),t._v(" "),s("li",[t._v("本地回环地址(hostAddress)： 127.0.0.1 主机名(hostName)： localhost")]),t._v(" "),s("li",[t._v("IP地址分类方式1： IPV4 和 IPV6\n"),s("ul",[s("li",[t._v("IPV4： 4个字节组成， 4个0-255。大概42亿， 30亿都在北美，亚洲4亿。 2011年初已\n经用尽。 以点分十进制表示，如192.168.0.1")]),t._v(" "),s("li",[t._v("IPV6： 128位（16个字节） ， 写成8个无符号整数，每个整数用四个十六进制位表示，\n数之间用冒号（：）分开，如： 3ffe:3201:1401:1280:c8ff:fe4d:db39:1984")])])]),t._v(" "),s("li",[t._v("IP地址分类方式2： 公网地址(万维网使用)和私有地址(局域网使用)。 192.168.\n开头的就是私有址址，范围即为192.168.0.0--192.168.255.255，专门为组织机\n构内部使用")])])]),t._v(" "),s("li",[s("strong",[t._v("port端口号")]),t._v("：标识正在计算机上运行的进程（程序）\n"),s("ul",[s("li",[t._v("不同的进程有不同的端口号")]),t._v(" "),s("li",[t._v("被规定为一个 16 位的整数 0~65535。")]),t._v(" "),s("li",[t._v("端口分类：\n"),s("ul",[s("li",[t._v("公认端口： 0~1023。被预先定义的服务通信占用（如： HTTP占用端口\n80， FTP占用端口21， Telnet占用端口23）")]),t._v(" "),s("li",[t._v("注册端口： 1024~49151。分配给用户进程或应用程序。（如： Tomcat占\n用端口8080， MySQL占用端口3306， Oracle占用端口1521等） 。")]),t._v(" "),s("li",[t._v("动态/私有端口： 49152~65535。")])])])])]),t._v(" "),s("li",[t._v("port与IP地址的组合得出一个网络套接字： Socket。")])]),t._v(" "),s("h3",{attrs:{id:"inetaddress类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inetaddress类"}},[t._v("#")]),t._v(" InetAddress类")]),t._v(" "),s("ul",[s("li",[t._v("Internet上的主机有两种方式表示地址：\n"),s("ul",[s("li",[t._v("域名(hostName)： https://github.com/")]),t._v(" "),s("li",[t._v("IP 地址(hostAddress)： 140.82.112.4")])])]),t._v(" "),s("li",[t._v("InetAddress类主要表示IP地址， 两个子类： Inet4Address、 Inet6Address。")]),t._v(" "),s("li",[t._v("InetAddress 类 对 象 含 有 一 个 Internet 主 机 地 址 的 域 名 和 IP 地 址 ：\nhttps://github.com/ 和 140.82.112.4")]),t._v(" "),s("li",[t._v("域名容易记忆，当在连接网络时输入一个主机的域名后， 域名服务器(DNS)\n负责将域名转化成IP地址，这样才能和主机建立连接。 -------域名解析")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("域名解析过程：")]),t._v(" "),s("ul",[s("li",[t._v("先去hosts文件查看有没有域名绑定ip,有则直接访问ip")]),t._v(" "),s("li",[t._v("上一步无，去访问DNS服务器，解析完得到ip,再去访问")])])]),t._v(" "),s("ul",[s("li",[t._v("InetAddress类没有提供公共的构造器，而是提供了如下几个静态方法来获取\nInetAddress实例\n"),s("ul",[s("li",[t._v("public static InetAddress getLocalHost()")]),t._v(" "),s("li",[t._v("public static InetAddress getByName(String host)")])])]),t._v(" "),s("li",[t._v("InetAddress提供了如下几个常用的方法\n"),s("ul",[s("li",[t._v("public String getHostAddress()： 返回 IP 地址字符串（以文本表现形式）")]),t._v(" "),s("li",[t._v("public String getHostName()： 获取此 IP 地址的主机名")]),t._v(" "),s("li",[t._v("public boolean isReachable(int timeout)： 测试是否可以达到该地址")])])])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class InetAddressDemo {\n    public static void test1() throws UnknownHostException {\n        InetAddress netAdd = InetAddress.getByName("zdw.gitlab.com");\n        System.out.println(netAdd);\n        System.out.println(netAdd.getHostName());\n        System.out.println(netAdd.getHostAddress());\n    }\n\n    public static void test2() throws UnknownHostException {\n        InetAddress netAdd = InetAddress.getLocalHost();\n        System.out.println(netAdd);\n    }\n\n    public static void main(String[] args) throws UnknownHostException {\n        test1();\n        test2();\n    }\n}\n输出打印：\nzdw.gitlab.com/192.168.163.204\nzdw.gitlab.com\n192.168.163.204\nDESKTOP-89F2Q26/192.168.163.1\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("h2",{attrs:{id:"通信要素二-网络协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通信要素二-网络协议"}},[t._v("#")]),t._v(" 通信要素二:网络协议")]),t._v(" "),s("ul",[s("li",[t._v("网络通信协议"),s("br"),t._v("\n计算机网络中实现通信必须有一些约定，即通信协议， 对速率、传输代码、代\n码结构、传输控制步骤、出错控制等制定标准。")]),t._v(" "),s("li",[t._v("问题：网络协议太复杂"),s("br"),t._v("\n计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩\n解压缩，差错控制，流量控制，路由控制，如何实现如此复杂的网络协议呢？")]),t._v(" "),s("li",[t._v("通信协议分层的思想 "),s("br"),t._v("\n在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。最常\n用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与\n再下一层不发生关系。各层互不影响，利于系统的开发和扩展。")])]),t._v(" "),s("h3",{attrs:{id:"tcp-ip协议簇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip协议簇"}},[t._v("#")]),t._v(" TCP/IP协议簇")]),t._v(" "),s("ul",[s("li",[t._v("传输层协议中有两个非常重要的协议：\n"),s("ul",[s("li",[t._v("传输控制协议TCP(Transmission Control Protocol)")]),t._v(" "),s("li",[t._v("用户数据报协议UDP(User Datagram Protocol)。")])])]),t._v(" "),s("li",[t._v("TCP/IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得\n名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。")]),t._v(" "),s("li",[t._v("IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。")]),t._v(" "),s("li",[t._v("TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即\n物理链路层、 IP层、传输层和应用层。")])]),t._v(" "),s("h3",{attrs:{id:"tcp协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[t._v("#")]),t._v(" TCP协议")]),t._v(" "),s("ul",[s("li",[t._v("使用TCP协议前，须先建立TCP连接，形成传输数据通道")]),t._v(" "),s("li",[t._v("传输前，采用“三次握手” 方式，点对点通信， 是可靠的")]),t._v(" "),s("li",[t._v("TCP协议进行通信的两个应用进程：客户端、 服务端。")]),t._v(" "),s("li",[t._v("在连接中可进行大数据量的传输")]),t._v(" "),s("li",[t._v("传输完毕，需释放已建立的连接， 效率低")])]),t._v(" "),s("h3",{attrs:{id:"udp协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp协议"}},[t._v("#")]),t._v(" UDP协议")]),t._v(" "),s("ul",[s("li",[t._v("将数据、源、目的封装成数据包， 不需要建立连接")]),t._v(" "),s("li",[t._v("每个数据报的大小限制在64K内")]),t._v(" "),s("li",[t._v("发送不管对方是否准备好，接收方收到也不确认， 故是不可靠的")]),t._v(" "),s("li",[t._v("可以广播发送")]),t._v(" "),s("li",[t._v("发送数据结束时无需释放资源，开销小，速度快")])]),t._v(" "),s("h3",{attrs:{id:"tcp三次握手-四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手-四次挥手"}},[t._v("#")]),t._v(" TCP三次握手/四次挥手")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/interview/iw-9.png",alt:""}}),s("br"),t._v(" "),s("img",{attrs:{src:"/images/interview/iw-10.png",alt:""}}),s("br")]),t._v(" "),s("h3",{attrs:{id:"socket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[t._v("#")]),t._v(" Socket")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实\n上的标准。")])]),t._v(" "),s("li",[s("p",[t._v("网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标\n识符套接字。")])]),t._v(" "),s("li",[s("p",[t._v("通信的两端都要有Socket，是两台机器间通信的端点。")])]),t._v(" "),s("li",[s("p",[t._v("网络通信其实就是Socket间的通信。")])]),t._v(" "),s("li",[s("p",[t._v("Socket允许程序把网络连接当成一个流， 数据在两个Socket间通过IO传输。")])]),t._v(" "),s("li",[s("p",[t._v("一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。")])]),t._v(" "),s("li",[s("p",[t._v("Socket分类：")]),t._v(" "),s("ul",[s("li",[t._v("流套接字（stream socket）：使用TCP提供可依赖的字节流服务")]),t._v(" "),s("li",[t._v("数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Socket类的常用构造器")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("public Socket(InetAddress address,int port)创建一个流套接字并将其连接到指定 IP 地址的指定端口号。")]),t._v(" "),s("li",[t._v("public Socket(String host,int port)创建一个流套接字并将其连接到指定主机上的指定端口号。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Socket类的常用方法")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("public InputStream getInputStream()返回此套接字的输入流。 可以用于接收网络消息")]),t._v(" "),s("li",[t._v("public OutputStream getOutputStream()返回此套接字的输出流。 可以用于发送网络消息")]),t._v(" "),s("li",[t._v("public InetAddress getInetAddress()此套接字连接到的远程 IP 地址；如果套接字是未连接的， 则返回 null。")]),t._v(" "),s("li",[t._v("public InetAddress getLocalAddress()获取套接字绑定的本地地址。 即本端的IP地址")]),t._v(" "),s("li",[t._v("public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字， 则返回 0。")]),t._v(" "),s("li",[t._v("public int getLocalPort()返回此套接字绑定到的本地端口。 如果尚未绑定套接字， 则返回 -1。 即本端的\n端口号。")]),t._v(" "),s("li",[t._v("public void close()关闭此套接字。 套接字被关闭后， 便不可在以后的网络连接中使用（即无法重新连接\n或重新绑定） 。 需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和\nOutputStream。")]),t._v(" "),s("li",[t._v("public void shutdownInput()如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容， 则流将\n返回 EOF（文件结束符） 。 即不能在从此套接字的输入流中接收任何数据。")]),t._v(" "),s("li",[t._v("public void shutdownOutput()禁用此套接字的输出流。 对于 TCP 套接字， 任何以前写入的数据都将被发\n送， 并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，\n则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。")])])])]),t._v(" "),s("h2",{attrs:{id:"tcp网络编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp网络编程"}},[t._v("#")]),t._v(" TCP网络编程")]),t._v(" "),s("h3",{attrs:{id:"基于socket的tcp编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于socket的tcp编程"}},[t._v("#")]),t._v(" 基于Socket的TCP编程")]),t._v(" "),s("ul",[s("li",[t._v("Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模\n型如图所示：\n"),s("img",{attrs:{src:"/images/interview/iw-11.png",alt:""}}),s("br")])]),t._v(" "),s("h3",{attrs:{id:"客户端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[t._v("#")]),t._v(" 客户端")]),t._v(" "),s("ul",[s("li",[t._v("客户端Socket的工作过程包含以下四个基本的步骤：\n"),s("ul",[s("li",[t._v("创建 Socket： 根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端\n响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。")]),t._v(" "),s("li",[t._v("打开连接到 Socket 的输入/出流： 使用 getInputStream()方法获得输入流，使用\ngetOutputStream()方法获得输出流，进行数据传输")]),t._v(" "),s("li",[t._v("按照一定的协议对 Socket 进行读/写操作： 通过输入流读取服务器放入线路的信息\n（但不能读取自己放入线路的信息），通过输出流将信息写入线程。")]),t._v(" "),s("li",[t._v("关闭 Socket： 断开客户端到服务器的连接，释放线路")])])]),t._v(" "),s("li",[t._v("客户端程序可以使用Socket类创建对象， 创建的同时会自动向服务器方发起连\n接。 Socket的构造器是：\n"),s("ul",[s("li",[t._v("Socket(String host,int port)throws UnknownHostException,IOException： 向服务器(域名是\nhost。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。")]),t._v(" "),s("li",[t._v("Socket(InetAddress address,int port)throws IOException： 根据InetAddress对象所表示的\nIP地址以及端口号port发起连接。")])])]),t._v(" "),s("li",[t._v("客户端建立socketAtClient对象的过程就是向服务器发出套接字连接请求")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    Socket client = new Socket("192.168.163.1",12345);\n    OutputStream out = client.getOutputStream();\n    out.write("hello".getBytes());\n    client.close();\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"服务端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端"}},[t._v("#")]),t._v(" 服务端")]),t._v(" "),s("ul",[s("li",[t._v("服务器程序的工作过程包含以下四个基本的步骤：\n"),s("ul",[s("li",[t._v("调用 ServerSocket(int port) ： 创建一个服务器端套接字，并绑定到指定端口\n上。用于监听客户端的请求。")]),t._v(" "),s("li",[t._v("调用 accept()： 监听连接请求，如果客户端请求连接，则接受连接，返回通信\n套接字对象。")]),t._v(" "),s("li",[t._v("调用 该Socket类对象的 getOutputStream() 和 getInputStream ()： 获取输出\n流和输入流，开始网络数据的发送和接收。")]),t._v(" "),s("li",[t._v("关闭ServerSocket和Socket对象： 客户端访问结束，关闭通信套接字。")])])]),t._v(" "),s("li",[t._v("ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口\n中的业务员。也就是说， 服务器必须事先建立一个等待客户请求建立套接字\n连接的ServerSocket对象。")]),t._v(" "),s("li",[t._v("所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    ServerSocket server = new ServerSocket(12345);\n    Socket client = server.accept();\n    InputStream is = client.getInputStream();\n    byte[] bytes = new byte[1024];\n    int num = is.read(bytes);\n    String msg = new String(bytes, 0, num);\n    System.out.println(client.getInetAddress().toString() + " => " + msg);\n    client.close();\n    server.close();\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h2",{attrs:{id:"udp网络编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp网络编程"}},[t._v("#")]),t._v(" UDP网络编程")]),t._v(" "),s("h3",{attrs:{id:"udp网络通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp网络通信"}},[t._v("#")]),t._v(" UDP网络通信")]),t._v(" "),s("ul",[s("li",[t._v("类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。")]),t._v(" "),s("li",[t._v("UDP数据报通过数据报套接字 DatagramSocket 发送和接收， 系统不保证\nUDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。")]),t._v(" "),s("li",[t._v("DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP\n地址和端口号以及接收端的IP地址和端口号。")]),t._v(" "),s("li",[t._v("UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和\n接收方的连接。 如同发快递包裹一样。")])]),t._v(" "),s("h3",{attrs:{id:"datagramsocket-类的常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#datagramsocket-类的常用方法"}},[t._v("#")]),t._v(" DatagramSocket 类的常用方法")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("public DatagramSocket")]),t._v("(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。 套接字将被\n绑定到通配符地址， IP 地址由内核来选择。")]),t._v(" "),s("li",[s("strong",[t._v("public DatagramSocket")]),t._v("(int port,InetAddress laddr)创建数据报套接字， 将其绑定到指定的本地地址。\n本地端口必须在 0 到 65535 之间（包括两者） 。 如果 IP 地址为 0.0.0.0， 套接字将被绑定到通配符地\n址， IP 地址由内核选择。")]),t._v(" "),s("li",[s("strong",[t._v("public void close")]),t._v("()关闭此数据报套接字。")]),t._v(" "),s("li",[s("strong",[t._v("public void send")]),t._v("(DatagramPacket p)从此套接字发送数据报包。 DatagramPacket 包含的信息指示：将\n要发送的数据、 其长度、 远程主机的 IP 地址和远程主机的端口号。")]),t._v(" "),s("li",[s("strong",[t._v("public void receive")]),t._v("(DatagramPacket p)从此套接字接收数据报包。 当此方法返回时， DatagramPacket\n的缓冲区填充了接收的数据。 数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法\n在接收到数据报前一直阻塞。 数据报包对象的 length 字段包含所接收信息的长度。 如果信息比包的\n长度长， 该信息将被截短。")]),t._v(" "),s("li",[s("strong",[t._v("public InetAddress getLocalAddress")]),t._v("()获取套接字绑定的本地地址。")]),t._v(" "),s("li",[s("strong",[t._v("public int getLocalPort")]),t._v("()返回此套接字绑定的本地主机上的端口号。")]),t._v(" "),s("li",[s("strong",[t._v("public InetAddress getInetAddress")]),t._v("()返回此套接字连接的地址。 如果套接字未连接， 则返回 null。")]),t._v(" "),s("li",[s("strong",[t._v("public int getPort")]),t._v("()返回此套接字的端口。 如果套接字未连接， 则返回 -1。")])]),t._v(" "),s("h3",{attrs:{id:"datagrampacket类的常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#datagrampacket类的常用方法"}},[t._v("#")]),t._v(" DatagramPacket类的常用方法")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("public DatagramPacket")]),t._v("(byte[] buf,int length)构造 DatagramPacket， 用来接收长\n度为 length 的数据包。 length 参数必须小于等于 buf.length。")]),t._v(" "),s("li",[s("strong",[t._v("public DatagramPacket")]),t._v("(byte[] buf,int length,InetAddress address,int port)构造数\n据报包， 用来将长度为 length 的包发送到指定主机上的指定端口号。 length\n参数必须小于等于 buf.length。")]),t._v(" "),s("li",[s("strong",[t._v("public InetAddress getAddress")]),t._v("()返回某台机器的 IP 地址， 此数据报将要发往该\n机器或者是从该机器接收到的。")]),t._v(" "),s("li",[s("strong",[t._v("public int getPort")]),t._v("()返回某台远程主机的端口号， 此数据报将要发往该主机或\n者是从该主机接收到的。")]),t._v(" "),s("li",[s("strong",[t._v("public byte[] getData")]),t._v("()返回数据缓冲区。 接收到的或将要发送的数据从缓冲区\n中的偏移量 offset 处开始， 持续 length 长度。")]),t._v(" "),s("li",[s("strong",[t._v("public int getLength")]),t._v("()返回将要发送或接收到的数据的长度。")])]),t._v(" "),s("h3",{attrs:{id:"实现案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现案例"}},[t._v("#")]),t._v(" 实现案例")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("流 程：")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("DatagramSocket与DatagramPacket")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("建立发送端，接收端")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("建立数据包")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("调用Socket的发送、 接收方法")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("关闭Socket")])])])])]),t._v(" "),s("li",[s("p",[t._v("发送端与接收端是两个独立的运行程序")])]),t._v(" "),s("li",[s("p",[t._v("发送端")])])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    DatagramSocket ds = new DatagramSocket();\n    byte[] bys = "Hello,world!".getBytes();\n    DatagramPacket dp = new DatagramPacket(bys,0,bys.length,\n            InetAddress.getByName("localhost"),12333);\n    ds.send(dp);\n    ds.close();\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("ul",[s("li",[t._v("接受端")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    DatagramSocket ds = new DatagramSocket(12333);\n    byte[] bys = new byte[1024];\n    DatagramPacket dp = new DatagramPacket(bys, bys.length);\n    ds.receive(dp);\n    String str = new String(dp.getData(), 0, dp.getLength());\n    System.out.println(str + " => " + dp.getAddress());\n    ds.close();\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h3",{attrs:{id:"nio-socket编程实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nio-socket编程实践"}},[t._v("#")]),t._v(" NIO-Socket编程实践")]),t._v(" "),s("h3",{attrs:{id:"aio-socket编程实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aio-socket编程实践"}},[t._v("#")]),t._v(" AIO-Socket编程实践")]),t._v(" "),s("h2",{attrs:{id:"url编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#url编程"}},[t._v("#")]),t._v(" URL编程")]),t._v(" "),s("h3",{attrs:{id:"url类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#url类"}},[t._v("#")]),t._v(" URL类")]),t._v(" "),s("ul",[s("li",[t._v("URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一\n资源的地址。")]),t._v(" "),s("li",[t._v("它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate\n这个资源。")]),t._v(" "),s("li",[t._v("通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www， ftp\n站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。")]),t._v(" "),s("li",[t._v("URL的基本结构由5部分组成：\n<传输协议>://<主机名>:<端口号>/<文件名>#片段名?参数列表\n"),s("ul",[s("li",[t._v("例如:\nhttp://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&password=123")]),t._v(" "),s("li",[t._v("#片段名：即锚点，例如看小说，直接定位到章节")]),t._v(" "),s("li",[t._v("参数列表格式：参数名=参数值&参数名=参数值....")])])])]),t._v(" "),s("h3",{attrs:{id:"url类构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#url类构造器"}},[t._v("#")]),t._v(" URL类构造器")]),t._v(" "),s("ul",[s("li",[t._v("为了表示URL， java.net 中实现了类 URL。我们可以通过下面的构造器来初\n始化一个 URL 对象：\n"),s("ul",[s("li",[t._v('public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例\n如： URL url = new URL ("http://www. atguigu.com/");')]),t._v(" "),s("li",[t._v('public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。\n例如： URL downloadUrl = new URL(url, “download.html")')]),t._v(" "),s("li",[t._v('public URL(String protocol, String host, String file); 例如： new URL("http",\n"www.atguigu.com", “download. html");')]),t._v(" "),s("li",[t._v('public URL(String protocol, String host, int port, String file); 例如: URL gamelan = new\nURL("http", "www.atguigu.com", 80, “download.html");')])])]),t._v(" "),s("li",[t._v("URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通\n常是用 try-catch 语句进行捕获。")])]),t._v(" "),s("h3",{attrs:{id:"url类常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#url类常用方法"}},[t._v("#")]),t._v(" URL类常用方法")]),t._v(" "),s("ul",[s("li",[t._v("一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的\n方法来获取这些属性：\n"),s("ul",[s("li",[t._v("public String getProtocol( ) 获取该URL的协议名")]),t._v(" "),s("li",[t._v("public String getHost( ) 获取该URL的主机名")]),t._v(" "),s("li",[t._v("public String getPort( ) 获取该URL的端口号")]),t._v(" "),s("li",[t._v("public String getPath( ) 获取该URL的文件路径")]),t._v(" "),s("li",[t._v("public String getFile( ) 获取该URL的文件名")]),t._v(" "),s("li",[t._v("public String getQuery( ) 获取该URL的查询名")])])]),t._v(" "),s("li",[t._v("实践：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    URL url = new URL("http://localhost:8080/examples/myTest.txt");\n    System.out.println("getProtocol() :"+url.getProtocol());\n    System.out.println("getHost() :"+url.getHost());\n    System.out.println("getPort() :"+url.getPort());\n    System.out.println("getPath() :"+url.getPath());\n    System.out.println("getFile() :"+url.getFile());\n    System.out.println("getQuery() :"+url.getQuery());\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h3",{attrs:{id:"urlconnection类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#urlconnection类"}},[t._v("#")]),t._v(" URLConnection类")]),t._v(" "),s("ul",[s("li",[t._v("URL的方法 openStream()：能从网络上读取数据")]),t._v(" "),s("li",[t._v("若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway\nInterface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一\n些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用\nURLConnection 。")]),t._v(" "),s("li",[t._v("URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，\n首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection\n对象。如果连接过程失败，将产生IOException.\n"),s("ul",[s("li",[t._v('URL netchinaren = new URL ("http://www.baidu.com/index.shtml");')]),t._v(" "),s("li",[t._v("URLConnectonn u = netchinaren.openConnection( );")])])]),t._v(" "),s("li",[t._v("通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI\n程序进行交互。\n"),s("ul",[s("li",[t._v("public Object getContent( ) throws IOException")]),t._v(" "),s("li",[t._v("public int getContentLength( )")]),t._v(" "),s("li",[t._v("public String getContentType( )")]),t._v(" "),s("li",[t._v("public long getDate( )")]),t._v(" "),s("li",[t._v("public long getLastModified( )")]),t._v(" "),s("li",[t._v("public InputStream getInputStream( )throws IOException")]),t._v(" "),s("li",[t._v("public OutputSteram getOutputStream( )throws IOException")])])])]),t._v(" "),s("h3",{attrs:{id:"uri、url和urn的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uri、url和urn的区别"}},[t._v("#")]),t._v(" URI、URL和URN的区别")]),t._v(" "),s("p",[s("strong",[t._v("URI")]),t._v("，是uniform resource identifier，统一资源标识符， 用来唯一的标识一个\n资源。而"),s("strong",[t._v("URL")]),t._v("是uniform resource locator，统一资源定位符，它是一种具体\n的"),s("strong",[t._v("URI")]),t._v("，即"),s("strong",[t._v("URL")]),t._v("可以用来标识一个资源，而且还指明了如何locate这个资源。\n而"),s("strong",[t._v("URN")]),t._v("， uniform resource name，统一资源命名，是通过名字来标识资源，\n比如mailto:java-net@java.sun.com。也就是说， "),s("strong",[t._v("URI")]),t._v("是以一种抽象的，高层\n次概念定义统一资源标识，而"),s("strong",[t._v("URL")]),t._v("和"),s("strong",[t._v("URN")]),t._v("则是具体的资源标识的方式。 "),s("strong",[t._v("URL")]),t._v("\n和"),s("strong",[t._v("URN")]),t._v("都是一种"),s("strong",[t._v("URI")]),t._v("。"),s("br"),t._v("\n在Java的"),s("strong",[t._v("URI")]),t._v("中，一个"),s("strong",[t._v("URI")]),t._v("实例可以代表绝对的，也可以是相对的，只要它符\n合"),s("strong",[t._v("URI")]),t._v("的语法规则。而"),s("strong",[t._v("URL")]),t._v("类则\n不仅符合语义，还包含了定位该资源的信息，\n因此它不能是相对的。"),s("br"),t._v(" "),s("img",{attrs:{src:"/images/interview/iw-12.png",alt:""}}),s("br")])])}),[],!1,null,null,null);e.default=a.exports}}]);